"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[5785],{81021:(t,e)=>{e.A=(t,e)=>{const d=t.__vccOpts||t;for(const[t,a]of e)d[t]=a;return d}},43163:(t,e,d)=>{d.r(e),d.d(e,{comp:()=>E,data:()=>w});var a=d(6254);const i=d.p+"assets/img/image-20240829152014-87dyns5.bd25998e.png",p=d.p+"assets/img/image-20240829151306-o4o4lde.5578dc93.png",s=d.p+"assets/img/image-20240829152853-gswb8fq.af631f7a.png",l=d.p+"assets/img/image-20240829152338-a8af4xq.73a32cfa.png",o=d.p+"assets/img/image-20240829185353-23e5941.e8692453.png",n=d.p+"assets/img/image-20240829185634-u1x93ab.637fb4a2.png",c=d.p+"assets/img/image-20240829190042-1s8fkoi.adaa726a.png",r=d.p+"assets/img/image-20240829190055-5elp62y.9d021ee2.png",h=d.p+"assets/img/image-20240829175317-hm3ecxs.57ddf3fa.png",g=d.p+"assets/img/image-20240829191021-y3lm5ly.1946a2f6.png",m=d.p+"assets/img/image-20240829191322-11iyxfl.e40028e1.png",b=d.p+"assets/img/image-20240829191335-49tjro4.36f9c442.png",y=d.p+"assets/img/image-20240829180819-892odxj.d602f339.png",k=d.p+"assets/img/image-20240829182123-dd09qet.5582d9f2.png",f=d.p+"assets/img/image-20240829182041-ydoat1m.3cb9e9c1.png",u=d.p+"assets/img/image-20240829181540-vvezygj.26d6213f.png",v=d.p+"assets/img/image-20240829192042-huhwaso.f3a4df56.png",x=d.p+"assets/img/image-20240829192059-8a5y7ez.f2cd645e.png",A=d.p+"assets/img/image-20240903101744-qxesoub.6fb45b32.png",B=d.p+"assets/img/image-20240903103351-0sxfvw9.c18b569f.png",M=d.p+"assets/img/image-20240829194739-a0rblrp.512e7c58.png",j=d.p+"assets/img/image-20240829195601-dkbse4b.a1db60dd.png",z={},E=(0,d(81021).A)(z,[["render",function(t,e){return(0,a.uX)(),(0,a.CE)("div",null,e[0]||(e[0]=[(0,a.Fv)('<h1 id="文件上传" tabindex="-1"><a class="header-anchor" href="#文件上传"><span>文件上传</span></a></h1><h2 id="什么是文件上传漏洞" tabindex="-1"><a class="header-anchor" href="#什么是文件上传漏洞"><span>什么是文件上传漏洞？</span></a></h2><p>文件上传漏洞是指程序员在开发任意文件上传功能时，并未考虑文件格式后缀的合法性校验或者是只考虑在前端通过js进行<br> 后缀检验。这时攻击者可以上传一个与网站脚本语言相对应的恶意代码动态脚本，例如（jsp、asp、php、aspx文件后缀）到<br> 服务器上，从而攻击者访问这些恶意脚本对包含的恶意代码动态解析最终达到执行恶意代码的效果，进一步影响服务器安全。</p><p>​<img src="'+i+'" alt="image-20240829152014-87dyns5" loading="lazy">​</p><h2 id="文件上传漏洞条件" tabindex="-1"><a class="header-anchor" href="#文件上传漏洞条件"><span>文件上传漏洞条件</span></a></h2><ul><li><p>网站开文件上传功能php.ini file_upload=on</p></li><li><p>web上传目录有可写以上权限</p></li><li><p>文件能被正常解析为动态脚本，php=&gt;php</p></li><li><p>上传的文件至少得有读权限。</p></li><li><p>Wb容器可以解析上传的脚本，无论脚本以什么样的形式存在</p></li><li><p>无视以上条件的情况就是服务器配置不当，开启了PUT方法。</p><p>​<img src="'+p+'" alt="image-20240829151306-o4o4lde" loading="lazy">​</p></li></ul><h2 id="文件上传漏洞分类" tabindex="-1"><a class="header-anchor" href="#文件上传漏洞分类"><span>文件上传漏洞分类</span></a></h2><ul><li>文件任意上传 ——没有任何校验</li><li>绕过js校验上传 ——校验在前端</li><li>MIME-type类型绕过上传 ——服务器端 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types" title="1111" target="_blank" rel="noopener noreferrer"> 常见 MIME 类型列表</a></li><li>文件头检测 ——服务器端</li><li>绕过扩展名校验上传 ——服务器端</li><li>文件加载检测 ——服务器端</li><li>结合解析漏洞上传 ——中间件解析漏洞造成</li></ul><p>​<img src="'+s+'" alt="image-20240829152853-gswb8fq" loading="lazy">​</p><h2 id="文件上传漏洞的危害" tabindex="-1"><a class="header-anchor" href="#文件上传漏洞的危害"><span>文件上传漏洞的危害</span></a></h2><p>上传漏洞与SQL注入或XSS相比，其风险更大，如果Wb应用程序存在上传漏洞，攻击者上传的文件是Web脚本语言，服务器的Wb容器解释并执行了用户上传的脚本，导致代码执行。比如：如果上传的文件是病毒、木马文件，黑客用以诱骗用户或者管理员下载执行。如果上传的文件是钓鱼图片或为包含了脚本的图片，在某些版本的浏览器中会被作为脚本执行，被用于钓鱼和欺诈。攻击者甚至可以直接上传一个webshell到服务器上完全控制系统或致使系统瘫痪。</p><h2 id="文件上传漏洞的防御" tabindex="-1"><a class="header-anchor" href="#文件上传漏洞的防御"><span>文件上传漏洞的防御</span></a></h2><p>最理想的是能够过滤掉图片马中的恶意代码。</p><ul><li>采用白名单策略，严格限制上传文件的<span data-type="text" style="color:var(--b3-font-color9);">后缀名</span>。</li><li>进行二次渲染，过滤掉图片马中的恶意代码。</li><li>上传文件重命名，尽量少的从客户端获取信息。</li><li>避免文件包含漏洞。</li><li>严格处理文件路径，防御00截断漏洞，避开空格、点、：$DATA等windows特性。</li><li>将文件上传到对象存储。</li><li>服务器及时更新Web容器，防止解析漏洞的产生。</li><li>服务器可写目录不给执行权限。</li></ul><h2 id="前端js文件上传校验" tabindex="-1"><a class="header-anchor" href="#前端js文件上传校验"><span>前端js文件上传校验</span></a></h2><h4 id="经典文件上传代码" tabindex="-1"><a class="header-anchor" href="#经典文件上传代码"><span>经典文件上传代码</span></a></h4><p>​<img src="'+l+'" alt="image-20240829152338-a8af4xq" loading="lazy">​</p><h2 id="前端js检测绕过方法" tabindex="-1"><a class="header-anchor" href="#前端js检测绕过方法"><span>前端js检测绕过方法</span></a></h2><p>JS代码通常采用<span data-type="text" style="color:var(--b3-font-color8);">白名单策略</span>，检测文件<span data-type="text" style="color:var(--b3-font-color9);">后缀名</span>。配合表单事件使用。前端js脚本检测的安全防御是十分薄弱的。可以非<br> 常轻松的绕过。</p><ul><li>方法一：因为js脚本的运行环境是浏览器，我们可以<span data-type="text" style="color:var(--b3-font-color7);">修改js代码</span>，甚至删除表单事件，禁用js</li><li>方法二：使恶意文件后缀名符合白名单策略，用<span data-type="text" style="color:var(--b3-font-color8);">Bup挂代理抓包</span>，然后修改文件后缀名即可。</li><li>所以：仅前检测文件上传是远远不够的，需要结合<strong>后端服务器进行检测检测</strong>。</li></ul><ol><li><p>直接上传<code>.PHP</code>​文件提示文件名不合法，使用了前端校验。</p></li><li><p>查看源码，前端有校验</p><p>​<img src="'+o+'" alt="image-20240829185353-23e5941" loading="lazy">​</p></li><li><p>方法一：直接将上图函数名 <code>return checkfileExt()</code>​ 删除。</p><p>​<img src="'+n+'" alt="image-20240829185634-u1x93ab" loading="lazy">​</p></li><li><p>方法二：使恶意文件后缀名符合白名单策略，用<span data-type="text" style="color:var(--b3-font-color8);">Bup挂代理抓包</span>，然后修改文件后缀名即可。即将php文件改为jpg后缀上传，抓包改回。</p><p>​<img src="'+c+'" alt="image-20240829190042-1s8fkoi" loading="lazy">​</p><p>​<img src="'+r+'" alt="image-20240829190055-5elp62y" loading="lazy">​</p></li></ol><h2 id="mime-type检测" tabindex="-1"><a class="header-anchor" href="#mime-type检测"><span>MIME-TYPE检测</span></a></h2><p>MIME-TYPE检测也称content-type检测，在服务器端如果上传文件的MlME-TYPE与白名单一致，则允许上传。</p><p>经典代码：</p><p>​<img src="'+h+'" alt="image-20240829175317-hm3ecxs" loading="lazy">​</p><h3 id="mime概述" tabindex="-1"><a class="header-anchor" href="#mime概述"><span>MIME概述</span></a></h3><ul><li>MlME(Multipurpose Internet Mail Extensions)是描述消息内容类型的因特网标准。</li><li>MME消息能包含文本、图像、音频、视频以及其他应用程序专用的数据，当具有该扩展名的文件被访问时，浏览器会自动使用指定的应用程序打开。</li><li>协议中，使用Content--Type字段表示文件的MlME类型</li></ul><h3 id="mime-type检测绕过方法" tabindex="-1"><a class="header-anchor" href="#mime-type检测绕过方法"><span>MIME-TYPE检测绕过方法</span></a></h3><p>由于服务器在检测Content-下ype类型的时候，取得的变量来自于用户，所以可以用<span data-type="text" style="background-color:var(--b3-font-background8);">Burp抓包</span>，修改字段使其合法，即可绕过<br> 限制上传任意文件。</p><ol><li><p>上传一个php文件，但是该文件的content-type类型不在白名单当中。</p><p>​<img src="'+g+'" alt="image-20240829191021-y3lm5ly" loading="lazy">​</p></li><li><p>在Burp抓包修改字段值，改为符合要求的类型。从而绕过校验。</p><p>​<img src="'+m+'" alt="image-20240829191322-11iyxfl" loading="lazy">​</p></li><li><p>上传成功</p><p>​<img src="'+b+'" alt="image-20240829191335-49tjro4" loading="lazy">​</p></li></ol><h3 id="常见-mime-类型列表" tabindex="-1"><a class="header-anchor" href="#常见-mime-类型列表"><span><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types" target="_blank" rel="noopener noreferrer"> 常见 MIME 类型列表</a></span></a></h3><table><thead><tr><th>扩展名</th><th>文档类型</th><th>MIME 类型</th></tr></thead><tbody><tr><td>​<code>.aac</code>​</td><td>AAC 音频</td><td>​<code>audio/aac</code>​</td></tr><tr><td>​<code>.abw</code>​</td><td><a href="https://zh.wikipedia.org/wiki/AbiWord" target="_blank" rel="noopener noreferrer">AbiWord</a> 文档</td><td>​<code>application/x-abiword</code>​</td></tr><tr><td>​<code>.apng</code>​</td><td>动态可移植网络图形（APNG）图像</td><td>​<code>image/apng</code>​</td></tr><tr><td>​<code>.arc</code>​</td><td>归档文件（嵌入多个文件）</td><td>​<code>application/x-freearc</code>​</td></tr><tr><td>​<code>.avif</code>​</td><td>AVIF 图像</td><td>​<code>image/avif</code>​</td></tr><tr><td>​<code>.avi</code>​</td><td>AVI：音频视频交织文件格式（Audio Video Interleave）</td><td>​<code>video/x-msvideo</code>​</td></tr><tr><td>​<code>.azw</code>​</td><td>Amazon Kindle 电子书格式</td><td>​<code>application/vnd.amazon.ebook</code>​</td></tr><tr><td>​<code>.bin</code>​​</td><td>任何二进制数据类型</td><td>​<code>application/octet-stream</code>​</td></tr><tr><td>​<code>.bmp</code>​</td><td>Windows OS/2 位图</td><td>​<code>image/bmp</code>​</td></tr><tr><td>​<code>.bz</code>​</td><td>BZip 归档</td><td>​<code>application/x-bzip</code>​</td></tr><tr><td>​<code>.bz2</code>​</td><td>BZip2 归档</td><td>​<code>application/x-bzip2</code>​</td></tr><tr><td>​<code>.cda</code>​</td><td>CD 音频</td><td>​<code>application/x-cdf</code>​</td></tr><tr><td>​<code>.csh</code>​</td><td>C-Shell 脚本</td><td>​<code>application/x-csh</code>​</td></tr><tr><td>​<code>.css</code>​</td><td>层叠样式表（CSS）</td><td>​<code>text/css</code>​</td></tr><tr><td>​<code>.csv</code>​</td><td>逗号分隔值（CSV）</td><td>​<code>text/csv</code>​</td></tr><tr><td>​<code>.doc</code>​​</td><td>Microsoft Word</td><td>​<code>application/msword</code>​</td></tr><tr><td>​<code>.docx</code>​​</td><td>Microsoft Word（OpenXML）</td><td>​<code>application/vnd.openxmlformats-officedocument.wordprocessingml.document</code>​</td></tr><tr><td>​<code>.eot</code>​</td><td>MS 嵌入式 OpenType 字体</td><td>​<code>application/vnd.ms-fontobject</code>​</td></tr><tr><td>​<code>.epub</code>​</td><td>电子出版（EPUB）</td><td>​<code>application/epub+zip</code>​</td></tr><tr><td>​<code>.gz</code>​</td><td>GZip 压缩归档</td><td>​<code>application/gzip</code>​</td></tr><tr><td>​<code>.gif</code>​​</td><td>图像互换格式（GIF）</td><td>​<code>image/gif</code>​</td></tr><tr><td>​<code>.htm</code>​​ <code>.html</code>​​</td><td>超文本标记语言（HTML）</td><td>​<code>text/html</code>​</td></tr><tr><td>​<code>.ico</code>​​</td><td>图标（Icon）格式</td><td>​<code>image/vnd.microsoft.icon</code>​</td></tr><tr><td>​<code>.ics</code>​</td><td>iCalendar 格式</td><td>​<code>text/calendar</code>​</td></tr><tr><td>​<code>.jar</code>​</td><td>Java 归档 （JAR）</td><td>​<code>application/java-archive</code>​</td></tr><tr><td>​<code>.jpeg</code>​​ <code>.jpg</code>​​</td><td>JPEG 图像</td><td>​<code>image/jpeg</code>​</td></tr><tr><td>​<code>.js</code>​</td><td>JavaScript （英语）</td><td>​<code>text/javascript</code>​（规范：HTML 和 RFC 9239）</td></tr><tr><td>​<code>.json</code>​</td><td>JSON 格式</td><td>​<code>application/json</code>​</td></tr><tr><td>​<code>.jsonld</code>​</td><td>JSON-LD 格式</td><td>​<code>application/ld+json</code>​</td></tr><tr><td>​<code>.mid</code>​,<code>.midi</code>​</td><td>音乐数字接口（MIDI）</td><td>​<code>audio/midi</code>​、<code>audio/x-midi</code>​</td></tr><tr><td>​<code>.mjs</code>​</td><td>JavaScript 模块</td><td>​<code>text/javascript</code>​</td></tr><tr><td>​<code>.mp3</code>​​</td><td>MP3 音频</td><td>​<code>audio/mpeg</code>​</td></tr><tr><td>​<code>.mp4</code>​​</td><td>MP4 视频</td><td>​<code>video/mp4</code>​</td></tr><tr><td>​<code>.mpeg</code>​</td><td>MPEG 视频</td><td>​<code>video/mpeg</code>​</td></tr><tr><td>​<code>.mpkg</code>​</td><td>Apple 安装包</td><td>​<code>application/vnd.apple.installer+xml</code>​</td></tr><tr><td>​<code>.odp</code>​</td><td>开放文档演示稿文档</td><td>​<code>application/vnd.oasis.opendocument.presentation</code>​</td></tr><tr><td>​<code>.ods</code>​</td><td>开放文档表格文档</td><td>​<code>application/vnd.oasis.opendocument.spreadsheet</code>​</td></tr><tr><td>​<code>.odt</code>​</td><td>开放文档文本文档</td><td>​<code>application/vnd.oasis.opendocument.text</code>​</td></tr><tr><td>​<code>.oga</code>​</td><td>OGG 音频</td><td>​<code>audio/ogg</code>​</td></tr><tr><td>​<code>.ogv</code>​</td><td>OGG 视频</td><td>​<code>video/ogg</code>​</td></tr><tr><td>​<code>.ogx</code>​</td><td>OGG 系列</td><td>​<code>application/ogg</code>​</td></tr><tr><td>​<code>.opus</code>​</td><td>Opus 音频</td><td>​<code>audio/opus</code>​</td></tr><tr><td>​<code>.otf</code>​</td><td>OpenType 字体</td><td>​<code>font/otf</code>​</td></tr><tr><td>​<code>.png</code>​​</td><td>便携式网络图形</td><td>​<code>image/png</code>​</td></tr><tr><td>​<code>.pdf</code>​​</td><td>Adobe <a href="https://www.adobe.com/acrobat/about-adobe-pdf.html" target="_blank" rel="noopener noreferrer">便携式文档格式</a>（PDF）</td><td>​<code>application/pdf</code>​</td></tr><tr><td>​<code>.php</code>​</td><td>超文本预处理器（<strong>Personal Home Page</strong>）</td><td>​<code>application/x-httpd-php</code>​</td></tr><tr><td>​<code>.ppt</code>​</td><td>Microsoft PowerPoint</td><td>​<code>application/vnd.ms-powerpoint</code>​</td></tr><tr><td>​<code>.pptx</code>​</td><td>Microsoft PowerPoint（OpenXML）</td><td>​<code>application/vnd.openxmlformats-officedocument.presentationml.presentation</code>​</td></tr><tr><td>​<code>.rar</code>​</td><td>RAR 归档</td><td>​<code>application/vnd.rar</code>​</td></tr><tr><td>​<code>.rtf</code>​</td><td>富文本格式（RTF）</td><td>​<code>application/rtf</code>​</td></tr><tr><td>​<code>.sh</code>​</td><td>伯恩 shell 脚本</td><td>​<code>application/x-sh</code>​</td></tr><tr><td>​<code>.svg</code>​​</td><td>可缩放矢量图形（SVG）</td><td>​<code>image/svg+xml</code>​</td></tr><tr><td>​<code>.tar</code>​</td><td>磁带归档（TAR）</td><td>​<code>application/x-tar</code>​</td></tr><tr><td>​<code>.tif</code>​,<code>.tiff</code>​</td><td>标签图像文件格式（TIFF）</td><td>​<code>image/tiff</code>​</td></tr><tr><td>​<code>.ts</code>​</td><td>MPEG 传输流</td><td>​<code>video/mp2t</code>​</td></tr><tr><td>​<code>.ttf</code>​</td><td>TrueType 字体</td><td>​<code>font/ttf</code>​</td></tr><tr><td>​<code>.txt</code>​</td><td>文本（通常是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/ASCII" target="_blank" rel="noopener noreferrer">ASCII</a> 或 ISO 8859-n）</td><td>​<code>text/plain</code>​</td></tr><tr><td>​<code>.vsd</code>​</td><td>Microsoft Visio</td><td>​<code>application/vnd.visio</code>​</td></tr><tr><td>​<code>.wav</code>​</td><td>波形音频格式</td><td>​<code>audio/wav</code>​</td></tr><tr><td>​<code>.weba</code>​</td><td>WEBM 音频</td><td>​<code>audio/webm</code>​</td></tr><tr><td>​<code>.webm</code>​</td><td>WEBM 视频</td><td>​<code>video/webm</code>​</td></tr><tr><td>​<code>.webp</code>​</td><td>WEBP 图像</td><td>​<code>image/webp</code>​</td></tr><tr><td>​<code>.woff</code>​</td><td>Web 开放字体格式（WOFF）</td><td>​<code>font/woff</code>​</td></tr><tr><td>​<code>.woff2</code>​</td><td>Web 开放字体格式（WOFF）</td><td>​<code>font/woff2</code>​</td></tr><tr><td>​<code>.xhtml</code>​</td><td>XHTML 格式</td><td>​<code>application/xhtml+xml</code>​</td></tr><tr><td>​<code>.xls</code>​</td><td>Microsoft Excel</td><td>​<code>application/vnd.ms-excel</code>​</td></tr><tr><td>​<code>.xlsx</code>​</td><td>Microsoft Excel（OpenXML）</td><td>​<code>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</code>​</td></tr><tr><td>​<code>.xml</code>​</td><td>XML 格式</td><td>​<code>application/xmltext/xml.xmlapplication/atom+xmlapplication/xml</code>​</td></tr><tr><td>​<code>.xul</code>​</td><td>XUL 系列</td><td>​<code>application/vnd.mozilla.xul+xml</code>​</td></tr><tr><td>​<code>.zip</code>​</td><td>ZIP 归档</td><td>​<code>application/zip</code>​</td></tr><tr><td>​<code>.3gp</code>​</td><td><a href="https://zh.wikipedia.org/wiki/3GP" target="_blank" rel="noopener noreferrer">3GPP</a> 音视频容器</td><td>​<code>video/3gpp</code>​；如果不包含视频则为<code>audio/3gpp</code>​</td></tr><tr><td>​<code>.3g2</code>​</td><td><a href="https://zh.wikipedia.org/wiki/3GP" target="_blank" rel="noopener noreferrer">3GPP2</a> 音视频容器</td><td>​<code>video/3gpp2</code>​；如果不包含视频则为<code>audio/3gpp2</code>​</td></tr><tr><td>​<code>.7z</code>​​</td><td><a href="https://zh.wikipedia.org/wiki/7-Zip" target="_blank" rel="noopener noreferrer">7-zip</a> 归档</td><td>​<code>application/x-7z-compressed</code>​</td></tr></tbody></table><p>​<img src="'+y+'" alt="image-20240829180819-892odxj" loading="lazy">​</p><h2 id="文件头检测" tabindex="-1"><a class="header-anchor" href="#文件头检测"><span>文件头检测</span></a></h2><ul><li><p>文件头是位于文件开头的一段承担一定任务的数据，就是为了描述文件的一些重要属性，比如图片的长度、宽度、像素尺寸等，一般都在开头的部分。</p><p>​<img src="'+k+'" alt="image-20240829182123-dd09qet" loading="lazy">​</p></li><li><p>文件头检测是使用对于文件内容的验证机制，这种方法利用的是：每一个特定类型的文件都会有不太一样的开头或者标志<br> 位，也就是我们常说的文件幻数</p></li><li><p>文件幻数，可以用来标记文件或者协议的格式，很多文件都有幻数标志来表明该文件的格式</p></li></ul><h3 id="相关函数" tabindex="-1"><a class="header-anchor" href="#相关函数"><span>相关函数</span></a></h3><p>函数名：getimagesize()</p><p>说明：用于获取图像大小及相关信息，成功返回一个数组，失败则返回FALSE并产生一条错误信息；这个函数本意是<span data-type="text" style="color:var(--b3-font-color8);">检查图片的大小</span>，但是在检查之前，该函数会判断目标文件是否是一张图片。因此，可以用该函数来检测文件的内容。</p><p>​<img src="'+f+'" alt="image-20240829182041-ydoat1m" loading="lazy">​</p><h3 id="检测流程" tabindex="-1"><a class="header-anchor" href="#检测流程"><span>检测流程</span></a></h3><p>读取图像——&gt;检查文件头——&gt;判断上传文件是否合法</p><h3 id="文件头检测相关代码" tabindex="-1"><a class="header-anchor" href="#文件头检测相关代码"><span>文件头检测相关代码</span></a></h3><p>​<img src="'+u+'" alt="image-20240829181540-vvezygj" loading="lazy">​</p><h3 id="文件头检测的绕过方法" tabindex="-1"><a class="header-anchor" href="#文件头检测的绕过方法"><span>文件头检测的绕过方法</span></a></h3><p>说明：</p><ul><li>通过伪造合法的文件头可以绕过这种检测</li><li>通常检测函数根据文件的前10个字节，就可以判断出文件的类型，而图片的文件头一般都是固定的</li></ul><p>方法：</p><ul><li>在恶意脚本前加上文件头即可，如<span data-type="text" style="background-color:var(--b3-font-background8);">GIF89a</span></li><li>制作图片马，可以通过命令行生成</li><li>使用010 editor等编辑工具打开一张图片，在图片中加上webshell脚本</li></ul><p>步骤： 在恶意脚本前加上文件头即可，如<span data-type="text" style="background-color:var(--b3-font-background8);">GIF89a</span></p><ol><li><p>上传一个php文件，会提示我们文件不合法。</p></li><li><p>在上传文件时候开启抓包。</p></li><li><p>添加GIF文件头，放行。</p><p>​<img src="'+v+'" alt="image-20240829192042-huhwaso" loading="lazy">​</p></li><li><p>上传成功</p><p>​<img src="'+x+'" alt="image-20240829192059-8a5y7ez" loading="lazy">​</p></li></ol><p>‍</p><h2 id="黑白名单检测及绕过" tabindex="-1"><a class="header-anchor" href="#黑白名单检测及绕过"><span>黑白名单检测及绕过</span></a></h2><div class="language-mindmap line-numbers-mode" data-highlighter="shiki" data-ext="mindmap" data-title="mindmap" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>- 后端绕过 </span></span>\n<span class="line"><span>  - 黑名单检测绕过</span></span>\n<span class="line"><span>    - .htaccess</span></span>\n<span class="line"><span>    - 大小写绕过</span></span>\n<span class="line"><span>    - 点绕过</span></span>\n<span class="line"><span>    - 空格绕过</span></span>\n<span class="line"><span>    - ::$$DATA绕过</span></span>\n<span class="line"><span>    - 配合解析漏洞</span></span>\n<span class="line"><span>    - 双写后缀绕过</span></span>\n<span class="line"><span>  - 白名单检测绕过</span></span>\n<span class="line"><span>    - MIME-TYPE检测绕过</span></span>\n<span class="line"><span>    - %00截断绕过</span></span>\n<span class="line"><span>    - 0x00截断绕过</span></span>\n<span class="line"><span>    - 0x0a截断绕过</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原因：文件上传模块避免上传可执行的脚本文件，防止上传脚本需要设置对应的验证方式分类</p><ol><li>基于白名单验证：当上传的文件后缀名是在白名单中有的后缀名，文件才能上传成功</li><li>基于黑名单验证：当上传的文件后缀名是在黑名单中没有的后缀名，文件才能上传成功</li></ol><p>经典代码</p><p>​<img src="'+A+'" alt="image-20240903101744-qxesoub" loading="lazy">​</p><p>$deny_ext数据就是一个黑名单，数组元素就是不允许上传的类型</p><h2 id="绕过白名单检测" tabindex="-1"><a class="header-anchor" href="#绕过白名单检测"><span>绕过白名单检测</span></a></h2><p>只能上传白名单数组内的后缀名文件。</p><h2 id="绕过黑名单检测" tabindex="-1"><a class="header-anchor" href="#绕过黑名单检测"><span>绕过黑名单检测</span></a></h2><ul><li><p>文件名大小写绕过（较少） 用像AsP,pHp之类的文件名，如果黑名单上不存在的话就可以绕过黑名单检测</p><p>过滤严格的话一般会用strtolower（）函数把后缀名全变为小写，此时就不能绕过黑名单了</p></li><li><p>特殊文件名绕过（只Windows系统下）</p><p>上传不符合windows文件命名规则的文件名，会被windows系统<span data-type="text" style="text-shadow:1px 1px var(--b3-theme-surface-lighter), 2px 2px var(--b3-theme-surface-lighter), 3px 3px var(--b3-theme-surface-lighter), 4px 4px var(--b3-theme-surface-lighter);">自动去掉不符合规则符号</span>后面的内容</p><p>特殊文件名绕过有 ：</p><p>test.asp.</p><p>test.asp（空格 ）</p><p>上传test.php:1jpg 服务器生成：test.php 但文件内容空</p><p>上传shell.php::$DATA 服务器生成：shell.php 文件内容：写入的php代码</p></li><li><p>00截断绕过（了解就行）</p><p><img src="'+B+'" alt="image-20240903103351-0sxfvw9" loading="lazy">​</p></li></ul><h2 id="中间件解析漏洞上传" tabindex="-1"><a class="header-anchor" href="#中间件解析漏洞上传"><span>中间件解析漏洞上传</span></a></h2><h3 id="什么是文件解析" tabindex="-1"><a class="header-anchor" href="#什么是文件解析"><span>什么是文件解析？</span></a></h3><p>当服务器接收到一个<span data-type="text" style="color:var(--b3-font-color8);">HTTP请求</span>的时候，web容器(如lIS、Apache)首先会根据文件的<span data-type="text" style="color:var(--b3-font-color8);">后缀名</span>，决定如何处理这个请求。</p><p>当服务器获取到所请求的页面的后缀(如 <span data-type="text" style="color:var(--b3-font-color8);">.php</span>)后，接下来就会在服务器端寻找可以处理这类后缀名的应用程序，如果找不到则直接把这个文件返还给客户端</p><h3 id="漏洞利用" tabindex="-1"><a class="header-anchor" href="#漏洞利用"><span>漏洞利用</span></a></h3><p>由于中间件(如IS、Apache)<span data-type="text" style="color:var(--b3-font-color8);">本身的缺陷</span>，在对上传文件进行解析时会出现一些<span data-type="text" style="color:var(--b3-font-color8);">不可预料的错误从而导致被利用进行文件上传绕过</span>。</p><h4 id="常见的解析漏洞" tabindex="-1"><a class="header-anchor" href="#常见的解析漏洞"><span>常见的解析漏洞</span></a></h4><ul><li><p>Apache解析漏洞</p><p>1、多后缀 apache漏洞解析<br> 存在的版本：Apache1.X和Apache2.X<br> 解析规则：从<span data-type="text" style="color:var(--b3-font-color8);">右向左开始判断解析，如果后缀名为不可识别文件解析，就再往左判断</span>，如果都不认识，则会暴露其源码<br> 举例：<br> 可以上传一个test.php.aaa.bbb文件，绕过验证且服务器依然会将其解析为php<br> 访问/test.php,aaa,bbb,由于Apache不认识aaa和bbb,会从右向左一直遍历到后缀。php为止</p><p>2、配置问题导致漏洞<br> 漏洞产生原因：<br> ①如果在 <span data-type="text" style="color:var(--b3-font-color8);"> Apache的conf</span> 里有这样一行配置<code>AddHandler php5-script.php</code>​ 这时<span data-type="text" style="color:var(--b3-font-color8);">只要文件名里包含php</span>,即使<br> 文件名是test2.php,jpg也会以php来执行。<br> ②如果在 Apache的conf 里有这样一行配置<code>AddType application/x-httpd-php .jpg</code>​, 将.jpg后缀文件用php解析执行。即使扩展名是jpg,一样能以php方式执行。<br> 修复方案：<br> ①在apache配置文件中，禁止.php 这样的文件执行，配置文件里面加入</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" data-title="php" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">Files</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;.(php. | php3.)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">    order</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> Allow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">Deny</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">    Deny</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> from</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> all</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;/</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">Files</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②用伪静态能解决这个问题，重写类似。php.*这类文件，打开apache的httpd.conf找到</p><p>3、.htaccess文件解析 例：pass-4<br> .htaccess文件可以配置很多事情，如是否开启站点的图片缓存、自定义错误页面、自定义默认文档、等等。但我<br> 们这里只关心。htaccess文件的一个作用一<span data-type="text" style="color:var(--b3-font-color8);">MIME类型修改</span><br> 如果Apache中。.如果.htaccess可被执行并可被上传，那么可以尝试在。htaccess中写入</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" data-title="php" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">FilesMatch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;1.jpg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">SetHandler</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> application</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">httpd</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">php</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;/</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">FilesMatch</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//该语句会让Apache把shell.jpg文件当作php文件来解析</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种写法是：<br> ​<code>AddType application/x-httpd-php .xxx</code>​<br> 如果写入，就成功地使该.htaccess文件所在目录及其子目录的文件被Apache<span data-type="text" style="color:var(--b3-font-color8);">当做php文件执行。</span></p></li><li><p>1S6.0解析漏洞</p><p>1、目录解析<br> 形式：/x.asp/x.jpg<br> 原理：在网站下创建文件夹名字为 <span data-type="text" style="color:var(--b3-font-color8);"> .asp、.asa </span> 的文件夹，其<span data-type="text" style="color:var(--b3-font-color8);">目录内</span>的<span data-type="text" style="color:var(--b3-font-color8);">任何扩展名</span>的文件都被当作<span data-type="text" style="color:var(--b3-font-color8);">asp</span>文件来解析并执行。<br> 因此只要攻击者只需通过该漏洞上传图片马，不用修改后缀名</p><p>2、文件解析<br> 形式：/x.asp;.jpg(利用特殊符号&quot;;&quot;<br> 原理：在iis6.0下，服务器默认不解析分号后面的内容，所以x.asp;.jpg被解析为asp脚本</p><p>3、解析文件类型<br> 形式：/test.asa、/test.cer、/test.cdx<br> 原理：Iis6.0默认的可执行文件除了asp还包含这三种<span data-type="text" style="color:var(--b3-font-color8);">asa、cer、cdx,</span>会将这三种扩展名文件<span data-type="text" style="color:var(--b3-font-color8);">解析为asp</span>文件</p></li><li><p>PHP CGI解析漏洞 (畸形解析漏洞)</p><p>环境：IIS7.0/IIS7.5/Nginx1.x<br> 利用条件：<br> 1.Fast-CGl运行模式<br> 2.php.ini里cgi.fix_pathinfo=1(<span data-type="text" style="color:var(--b3-font-color8);">默认为1</span>)<br> 3.取消勾选php-cgi.exe程序的&quot;Invoke handler only if request is mapped to“<br> 形试：<span data-type="text" style="color:var(--b3-font-color8);">如果在一个文件路径/x.jpg后面加上/xx.php会将/x.jpg/x.php解析为php文件。</span></p></li><li><p>Nginx解析漏洞</p></li></ul><h2 id="图片马" tabindex="-1"><a class="header-anchor" href="#图片马"><span>图片马</span></a></h2><p>就是在图片中隐藏一句话木马。利用.htaccess等<strong>解析图片为PHP或者asp文件</strong>。达到执行图片内代码目的.</p><p>制作方法：</p><ul><li><p>cmd中<code> copy 1.jpg/b+2.php 3.jpg</code>​</p><ul><li>/b 与<code>copy</code>​命令一起使用，二进制模式复制文件</li><li>/a是ascii方式打开</li><li>追加2.php</li><li>保存为3.php</li></ul><p>​<img src="'+M+'" alt="image-20240829194739-a0rblrp" loading="lazy">​</p></li><li><p>使用16进制打开工具</p><p>​<img src="'+j+'" alt="image-20240829195601-dkbse4b" loading="lazy">​</p></li><li><p>linux中 <code> cat 1.jpg 1.php &gt; shell.php</code>​</p></li></ul><p>注意：</p><ul><li>单纯的图片马并不能直接和蚁剑连接，</li><li>因为该文件依然是以image格式进行解析，</li><li>只有利用<strong>文件包含漏洞</strong>，才能成功利用该木马</li><li>所谓文件包含漏洞，是指在代码中引入其他文件作为php文件执行时，未对文件进行严格过滤，导致用户指定任意文件，都作为php文件解析执行。</li></ul><h2 id="sql漏洞利用技巧" tabindex="-1"><a class="header-anchor" href="#sql漏洞利用技巧"><span>SQL漏洞利用技巧</span></a></h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxMjE3ODU3MQ==&amp;mid=2650599106&amp;idx=3&amp;sn=8386f178d05cc38f8d6382318a888839" target="_blank" rel="noopener noreferrer">实战 | 对自己学校内网的渗透测试</a></p><p>利用一：目录扫描发现Web Api Help接口文档泄露。可以根据文档找到漏洞。</p><p>利用二：使用远程下载命令，原理是把木马挂在自己HTTP服务器服务器，使用Sqlmap远程让目标下载执行。</p><p>利用三：有了马就要执行文件，可以选择提权或将文件放到有执行权限的目录里。</p><p>利用四：shell反弹，使用巨龙拉冬插件的“本地提权”下的“System2Admin”功能。伪造的system权限，反弹一个管理员权限的会话回来。不太懂。</p><p>利用五：管理员权限获取hash密码。并解码。登录、远程连接、增添影子账户。。。</p><p>利用六：使用该服务器继续寻找其他系统地址和有用信息。</p><p>‍</p>',85)]))}]]),w=JSON.parse('{"path":"/perm/%E6%BC%8F%E6%B4%9E%E4%B8%93%E9%A2%98/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html","title":"文件上传","lang":"zh-CN","frontmatter":{"title":"文件上传","index":true,"icon":"file","order":3,"isOriginal":true,"date":"2023-03-17T00:00:00.000Z","category":["渗透测试"],"tag":["渗透测试","文件上传"],"description":"文件上传 什么是文件上传漏洞？ 文件上传漏洞是指程序员在开发任意文件上传功能时，并未考虑文件格式后缀的合法性校验或者是只考虑在前端通过js进行 后缀检验。这时攻击者可以上传一个与网站脚本语言相对应的恶意代码动态脚本，例如（jsp、asp、php、aspx文件后缀）到 服务器上，从而攻击者访问这些恶意脚本对包含的恶意代码动态解析最终达到执行恶意代码的效果...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/perm/%E6%BC%8F%E6%B4%9E%E4%B8%93%E9%A2%98/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html"}],["meta",{"property":"og:site_name","content":"卷卷"}],["meta",{"property":"og:title","content":"文件上传"}],["meta",{"property":"og:description","content":"文件上传 什么是文件上传漏洞？ 文件上传漏洞是指程序员在开发任意文件上传功能时，并未考虑文件格式后缀的合法性校验或者是只考虑在前端通过js进行 后缀检验。这时攻击者可以上传一个与网站脚本语言相对应的恶意代码动态脚本，例如（jsp、asp、php、aspx文件后缀）到 服务器上，从而攻击者访问这些恶意脚本对包含的恶意代码动态解析最终达到执行恶意代码的效果..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-12T08:22:33.000Z"}],["meta",{"property":"article:tag","content":"渗透测试"}],["meta",{"property":"article:tag","content":"文件上传"}],["meta",{"property":"article:published_time","content":"2023-03-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-12T08:22:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"文件上传\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-17T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-12T08:22:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"卷卷\\"}]}"]]},"headers":[{"level":2,"title":"什么是文件上传漏洞？","slug":"什么是文件上传漏洞","link":"#什么是文件上传漏洞","children":[]},{"level":2,"title":"文件上传漏洞条件","slug":"文件上传漏洞条件","link":"#文件上传漏洞条件","children":[]},{"level":2,"title":"文件上传漏洞分类","slug":"文件上传漏洞分类","link":"#文件上传漏洞分类","children":[]},{"level":2,"title":"文件上传漏洞的危害","slug":"文件上传漏洞的危害","link":"#文件上传漏洞的危害","children":[]},{"level":2,"title":"文件上传漏洞的防御","slug":"文件上传漏洞的防御","link":"#文件上传漏洞的防御","children":[]},{"level":2,"title":"前端js文件上传校验","slug":"前端js文件上传校验","link":"#前端js文件上传校验","children":[]},{"level":2,"title":"前端js检测绕过方法","slug":"前端js检测绕过方法","link":"#前端js检测绕过方法","children":[]},{"level":2,"title":"MIME-TYPE检测","slug":"mime-type检测","link":"#mime-type检测","children":[{"level":3,"title":"MIME概述","slug":"mime概述","link":"#mime概述","children":[]},{"level":3,"title":"MIME-TYPE检测绕过方法","slug":"mime-type检测绕过方法","link":"#mime-type检测绕过方法","children":[]},{"level":3,"title":"常见 MIME 类型列表","slug":"常见-mime-类型列表","link":"#常见-mime-类型列表","children":[]}]},{"level":2,"title":"文件头检测","slug":"文件头检测","link":"#文件头检测","children":[{"level":3,"title":"相关函数","slug":"相关函数","link":"#相关函数","children":[]},{"level":3,"title":"检测流程","slug":"检测流程","link":"#检测流程","children":[]},{"level":3,"title":"文件头检测相关代码","slug":"文件头检测相关代码","link":"#文件头检测相关代码","children":[]},{"level":3,"title":"文件头检测的绕过方法","slug":"文件头检测的绕过方法","link":"#文件头检测的绕过方法","children":[]}]},{"level":2,"title":"黑白名单检测及绕过","slug":"黑白名单检测及绕过","link":"#黑白名单检测及绕过","children":[]},{"level":2,"title":"绕过白名单检测","slug":"绕过白名单检测","link":"#绕过白名单检测","children":[]},{"level":2,"title":"绕过黑名单检测","slug":"绕过黑名单检测","link":"#绕过黑名单检测","children":[]},{"level":2,"title":"中间件解析漏洞上传","slug":"中间件解析漏洞上传","link":"#中间件解析漏洞上传","children":[{"level":3,"title":"什么是文件解析？","slug":"什么是文件解析","link":"#什么是文件解析","children":[]},{"level":3,"title":"漏洞利用","slug":"漏洞利用","link":"#漏洞利用","children":[]}]},{"level":2,"title":"图片马","slug":"图片马","link":"#图片马","children":[]},{"level":2,"title":"SQL漏洞利用技巧","slug":"sql漏洞利用技巧","link":"#sql漏洞利用技巧","children":[]}],"git":{"createdTime":1736670153000,"updatedTime":1736670153000,"contributors":[{"name":"youze","username":"youze","email":"youze27@163.com","commits":1,"url":"https://github.com/youze"}]},"readingTime":{"minutes":15.54,"words":4662},"filePathRelative":"perm/漏洞专题/文件上传.md","localizedDate":"2023年3月17日","excerpt":"\\n<h2>什么是文件上传漏洞？</h2>\\n<p>文件上传漏洞是指程序员在开发任意文件上传功能时，并未考虑文件格式后缀的合法性校验或者是只考虑在前端通过js进行<br>\\n后缀检验。这时攻击者可以上传一个与网站脚本语言相对应的恶意代码动态脚本，例如（jsp、asp、php、aspx文件后缀）到<br>\\n服务器上，从而攻击者访问这些恶意脚本对包含的恶意代码动态解析最终达到执行恶意代码的效果，进一步影响服务器安全。</p>\\n<p>​​</p>\\n<h2>文件上传漏洞条件</h2>\\n<ul>\\n<li>\\n<p>网站开文件上传功能php.ini    file_upload=on</p>\\n</li>\\n<li>\\n<p>web上传目录有可写以上权限</p>\\n</li>\\n<li>\\n<p>文件能被正常解析为动态脚本，php=&gt;php</p>\\n</li>\\n<li>\\n<p>上传的文件至少得有读权限。</p>\\n</li>\\n<li>\\n<p>Wb容器可以解析上传的脚本，无论脚本以什么样的形式存在</p>\\n</li>\\n<li>\\n<p>无视以上条件的情况就是服务器配置不当，开启了PUT方法。</p>\\n<p>​​</p>\\n</li>\\n</ul>","autoDesc":true}')}}]);