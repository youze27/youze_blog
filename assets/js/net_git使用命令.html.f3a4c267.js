"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[4684],{81021:(e,i)=>{i.A=(e,i)=>{const s=e.__vccOpts||e;for(const[e,t]of i)s[e]=t;return s}},32305:(e,i,s)=>{s.r(i),s.d(i,{comp:()=>a,data:()=>n});var t=s(6254);const l={},a=(0,s(81021).A)(l,[["render",function(e,i){return(0,t.uX)(),(0,t.CE)("div",null,i[0]||(i[0]=[(0,t.Fv)('<h2 id="ssh密钥设置方法" tabindex="-1"><a class="header-anchor" href="#ssh密钥设置方法"><span>ssh密钥设置方法</span></a></h2><h3 id="windows" tabindex="-1"><a class="header-anchor" href="#windows"><span>windows</span></a></h3><ul><li>打开命令提示符（CMD）或PowerShell。</li><li>输入命令<code>ssh-keygen</code>。这个命令会启动密钥生成过程。默认情况下，它会生成一个RSA密钥对。</li><li>系统会提示你输入密钥的保存位置。如果你直接回车，密钥将保存在用户主目录下的<code>.ssh</code>文件夹中。</li><li>接下来，系统会提示你输入一个密码（passphrase）。这个密码用于保护你的私钥，增加安全性。如果你不想设置密码，直接回车即可，但这会使私钥在没有密码的情况下也能被使用，存在一定风险。</li><li>生成完成后，你会在指定的路径看到两个文件。例如，在默认路径下，<code>C:\\Users\\你的用户名\\.ssh\\id_rsa</code>是私钥文件，<code>C:\\Users\\你的用户名\\.ssh\\id_rsa.pub</code>是公钥文件。</li></ul><h3 id="linux" tabindex="-1"><a class="header-anchor" href="#linux"><span>linux</span></a></h3><ul><li>终端输入命令<code>ssh-keygen</code>。</li><li>系统会提示你输入密钥的保存位置。你可以直接回车使用默认路径。</li><li>接下来，输入一个密码（passphrase）来保护你的私钥。如果你不想设置密码，直接回车即可，但同样存在安全风险。</li><li>生成完成后，你可以在指定路径看到生成的密钥文件。例如，在默认路径下，<code>~/.ssh/id_rsa</code>是私钥文件，<code>~/.ssh/id_rsa.pub</code>是公钥文件。</li></ul><h2 id="登录github并添加ssh密钥" tabindex="-1"><a class="header-anchor" href="#登录github并添加ssh密钥"><span>登录GitHub并添加SSH密钥</span></a></h2><ul><li><strong>登录GitHub账户</strong></li><li>选择“Settings”（设置）。</li><li>在左侧菜单栏中，点击“SSH and GPG keys”（SSH和GPG密钥）选项。</li><li>点击“New SSH key”（新建SSH密钥）按钮。</li><li>在“Title”（标题）输入框中，输入一个易于识别的名称来标识是哪个设备的。</li><li>在“Key”（密钥）输入框中，粘贴之前复制的<strong>公钥****内容</strong>。确保公钥内容完整，不要遗漏任何字符。</li><li>点击“Add SSH key”（添加SSH密钥）按钮，完成添加操作。</li><li>终端 <code>ssh -T git@github.com</code>。这个命令会尝试通过SSH连接到GitHub服务器。如果连接成功，并且你的SSH密钥已经正确添加到GitHub</li></ul><h2 id="git相关概念" tabindex="-1"><a class="header-anchor" href="#git相关概念"><span>git相关概念</span></a></h2><ol><li>版本控制记录文件内容变化，以便查看和修改对应的版本的系统，</li><li>集中式版本控制工具（c/s模式）：svn、cvs、vss，优点：权限控制、会单点故障（服务器坏…）</li><li>分布式版本控制工具：客户端本地有完整项目仓库，git、mercurial、bazaar、darcs</li><li>Git发展历史：1991年linus手动合并-2002年bitkeeper授权社区使用-2005年linus用c开发git-两周后linux由git托管-2008linus上线托管jquery、ruby、php……</li><li>工作区：存放代码的位置。修改的内容没有历史记录。</li><li>暂存区：工作区的代码需要添加到暂存区零时存储。内容可被销毁。</li><li>本地库：提交到本地库的内容有了历史记录，内容不可销毁。</li><li>代码托管中心（远程库）：局域网：gitlab、互联网：github、gitee</li></ol><h2 id="设置签名" tabindex="-1"><a class="header-anchor" href="#设置签名"><span>设置签名</span></a></h2><ol start="9"><li>设置签名：<code>git config --global user.name username</code></li><li>设置签名邮箱：<code>git config --global user.email xxx@xxx.com</code></li><li>签名信息存放在：<code>C:\\Users\\xxx\\ .gitconfig</code></li><li>签名的作用是区分不同的操作者，用户签名信息在每一个版本提交信息中可以看到，确认是谁的操作，git首次使用必须设置用户签名，否则无法提交代码。和远程仓库账号无关系。</li></ol><h2 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h2><ol start="13"><li>初始化本地库：获取该文件的git管理权限，初始化管理信息：在该目录下使用<code>git init</code></li><li>查看本地库状态：<code>git status</code> //on branch mast 当前项目在mast分支 no commits yet当前没有内容需要提交。</li><li>使用linux命令创建文件并编辑：vim hello.txt \\ i(插入模式)hello(插入内容) \\esc \\:(命令模式)yy(复制)\\p(粘贴)\\:(命令模式)wq（保存退出）\\ll/l查看\\cat hello.txt(打开)</li></ol><h2 id="提交" tabindex="-1"><a class="header-anchor" href="#提交"><span>提交</span></a></h2><ol start="16"><li><strong>提交</strong>到暂存区：<strong>​<code>git add .</code>​</strong> (.代表全部，也可以直接指定文件名.后缀)</li><li><strong>查看</strong>：<code>git status</code></li><li><strong>删除</strong>暂存区文件：<code>git rm --cached hello.txt</code>（只是删除暂存区，工作区还是存在的）</li><li>**提交到本地仓库：**​<code>git commit -m &quot;备注/版本信息&quot; hello.txt</code></li><li>查看版本信息：<code>git reflog /git log</code></li><li>查看暂存区文件：<code>git ls-files</code></li><li>版本回退 ：<code>git reset --hard 版本号</code></li><li><strong>清空暂存区文件</strong> <code>git reset</code></li></ol><h2 id="分支" tabindex="-1"><a class="header-anchor" href="#分支"><span>分支</span></a></h2><ol start="24"><li>分支：在版本控制过程中，同时推进多个任务，我们可以为每个分支单独创建单独的分支，自己开发的时候不影响主干运行。</li><li>查看分支：<code>git branch -v</code></li><li>创建分支：<code>git branch hotfix</code>(分支名字)</li><li>切换分支：<code>git checkout hotfix</code></li><li>把其他分支合并到当前分支：<code>git merge hotfix</code></li><li>冲突产生原因：当两个项目在同一文件，同一位置有两个不同的版本时，git无法替我们决定使用哪一个，必须人为决定内容。</li><li>合并冲突：<code>git commit -m “merge_text”</code>(不加名字)</li></ol><h2 id="推送" tabindex="-1"><a class="header-anchor" href="#推送"><span>推送</span></a></h2><ol start="31"><li><p>把代码推送到github：创建仓库/记下仓库http链接</p></li><li><p>创建别名：<code>git remote add 别名 http://xxx</code></p></li><li><p>重设仓库：<code>git remote set-url origin URL // 更换远程仓库地址，URL为新地址。</code></p></li><li><p>使用 <code>git remote rm &lt;仓库别名&gt; </code>命令将指定的别名删除</p></li><li><p>查看别名：<code>git remote -v</code></p></li><li><p>推送项目到分支：推送最小单位是分支，没有别名可用链接，<strong>​<code>git push 别名 master</code>​</strong></p></li><li><p>克隆项目到本地：<code>git clone xxx</code></p></li><li><p>拉取远程项目：<code>git pull note master</code> (note是设置过的别名)</p></li><li><p>Pull request 将自己的分支推送到别的项目</p></li><li><p>本地生成.ssh密钥：<code>ssh-keygen -t rsa -C email</code>（三次回车）</p></li><li><p>在目录下会生成公钥和私钥：<code>C:\\Users\\xxx\\.ssh</code></p></li><li><p>ignore文件:不能上传大于100MB文件，需要ignore</p></li></ol><h2 id="推送最小流程" tabindex="-1"><a class="header-anchor" href="#推送最小流程"><span>推送最小流程</span></a></h2><p>git add . #提交到暂存区<br> git commit -a -m &quot;09&quot; #将代码同步到本地仓库<br> git push siyuan master #将本地master推送到远程siyuan 第二次以后可用 git push</p><h2 id="新项目推送流程" tabindex="-1"><a class="header-anchor" href="#新项目推送流程"><span>新项目推送流程</span></a></h2><p>确保项目文件没有超过100MB的</p><p>网页创建项目</p><p>git config --global <a href="http://user.name" target="_blank" rel="noopener noreferrer">user.name</a> &#39;xxx&#39;<br> git config --global user.email &#39;xxx@163.com&#39;</p><p>git init</p><p>网页端复制链接：git@gitee.com:xxx/xxx.git</p><p>git remote add 别名 &quot;链接地址&quot;</p><p><code>git remote -vv</code> 可以看到添加的仓库信息</p><p>使用SSH密钥（有则忽略）</p><p>git pull 别名 master （本地没有项目，把远程的拉下来合并）</p><p>git add .</p><p>git status</p><p>git commit -m &quot;备注&quot;</p><p>git push -f 别名 master 第一次需要-f强制推送</p><h2 id="ignore文件不起作用" tabindex="-1"><a class="header-anchor" href="#ignore文件不起作用"><span>ignore文件不起作用</span></a></h2><p>当我们用 git 时常常会习惯把我们不想上传到远程代码库中的一些本地文件（夹）放在一个叫做 .gitignore 的文件中，例如常见的本地 build 文件夹，一些 IDE 如Intellig、Eclipse的项目管理文件，比如下面一些配置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 此为注释 – 将被 Git 忽略</span></span>\n<span class="line"><span>*.a       // 忽略所有 .a 结尾的文件</span></span>\n<span class="line"><span>!lib.a    // 但 lib.a 除外</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>/TODO     // 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>node_modules</span></span>\n<span class="line"><span>.project</span></span>\n<span class="line"><span>.vscode</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>build/    // 忽略 build/ 目录下的所有文件</span></span>\n<span class="line"><span>doc/*.txt    // 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但有些时候我们会遇到这样的问题：放入gitignore文件夹中的文件却还是被 git index，当你通过 git status 显示文件状态时，他们并没有被忽略。</p><p>1、问题场景</p><p>当你在git库中编写某些代码文件，并已经stage该文件之后，你发现某个文件你不想用了，想在以后的改变中忽略它。然后你再你的.gitignore文件中加入该文件名，结果它并没有被忽略。</p><p>当你从远程代码库中 git clone 一份代码中本地并做些修改，build，然后通过 git add . 等 stage了这些改变，当你通过 git status 查看状态时发现不小心把build/文件夹给add进来了。于是你在.gitignore文件中加入了build/，但发现并不起作用。</p><p>2、根本原因</p><p>.gitignore 文件只是 ignore 没有被 staged(cached) 文件，<span data-type="text" style="background-color:var(--b3-font-background8);">对于已经被 staged 的文件，加入 ignore 文件时一定要先从 staged 移除。</span></p><figure><img src="https://img2020.cnblogs.com/blog/1158910/202107/1158910-20210715220241440-392288054.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>因此，要想用 ignore 忽略文件，必须先把它们从staged中移除：commit你已有的改变，保存当前的工作。</p><p>当文件夹是目录时，需要使用 -r 参数（递归）否则会报错</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git rm -r --cached .</span></span>\n<span class="line"><span>git add .</span></span>\n<span class="line"><span>git commit -m &quot;update .gitignore&quot;  // windows使用的命令时，需要使用双引号</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',48)]))}]]),n=JSON.parse('{"path":"/net/git%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4.html","title":"Git使用命令","lang":"zh-CN","frontmatter":{"title":"Git使用命令","index":true,"order":3,"isOriginal":true,"date":"2024-04-12T00:00:00.000Z","category":["计网基础"],"tag":["计网基础","git","ssh","版本控制"],"description":"ssh密钥设置方法 windows 打开命令提示符（CMD）或PowerShell。 输入命令ssh-keygen。这个命令会启动密钥生成过程。默认情况下，它会生成一个RSA密钥对。 系统会提示你输入密钥的保存位置。如果你直接回车，密钥将保存在用户主目录下的.ssh文件夹中。 接下来，系统会提示你输入一个密码（passphrase）。这个密码用于保护你...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/net/git%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4.html"}],["meta",{"property":"og:site_name","content":"卷卷"}],["meta",{"property":"og:title","content":"Git使用命令"}],["meta",{"property":"og:description","content":"ssh密钥设置方法 windows 打开命令提示符（CMD）或PowerShell。 输入命令ssh-keygen。这个命令会启动密钥生成过程。默认情况下，它会生成一个RSA密钥对。 系统会提示你输入密钥的保存位置。如果你直接回车，密钥将保存在用户主目录下的.ssh文件夹中。 接下来，系统会提示你输入一个密码（passphrase）。这个密码用于保护你..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img2020.cnblogs.com/blog/1158910/202107/1158910-20210715220241440-392288054.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-22T14:07:20.000Z"}],["meta",{"property":"article:tag","content":"计网基础"}],["meta",{"property":"article:tag","content":"git"}],["meta",{"property":"article:tag","content":"ssh"}],["meta",{"property":"article:tag","content":"版本控制"}],["meta",{"property":"article:published_time","content":"2024-04-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-22T14:07:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git使用命令\\",\\"image\\":[\\"https://img2020.cnblogs.com/blog/1158910/202107/1158910-20210715220241440-392288054.png\\"],\\"datePublished\\":\\"2024-04-12T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-22T14:07:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"卷卷\\"}]}"]]},"headers":[{"level":2,"title":"ssh密钥设置方法","slug":"ssh密钥设置方法","link":"#ssh密钥设置方法","children":[{"level":3,"title":"windows","slug":"windows","link":"#windows","children":[]},{"level":3,"title":"linux","slug":"linux","link":"#linux","children":[]}]},{"level":2,"title":"登录GitHub并添加SSH密钥","slug":"登录github并添加ssh密钥","link":"#登录github并添加ssh密钥","children":[]},{"level":2,"title":"git相关概念","slug":"git相关概念","link":"#git相关概念","children":[]},{"level":2,"title":"设置签名","slug":"设置签名","link":"#设置签名","children":[]},{"level":2,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":2,"title":"提交","slug":"提交","link":"#提交","children":[]},{"level":2,"title":"分支","slug":"分支","link":"#分支","children":[]},{"level":2,"title":"推送","slug":"推送","link":"#推送","children":[]},{"level":2,"title":"推送最小流程","slug":"推送最小流程","link":"#推送最小流程","children":[]},{"level":2,"title":"新项目推送流程","slug":"新项目推送流程","link":"#新项目推送流程","children":[]},{"level":2,"title":"ignore文件不起作用","slug":"ignore文件不起作用","link":"#ignore文件不起作用","children":[]}],"git":{"createdTime":1736654854000,"updatedTime":1737554840000,"contributors":[{"name":"youze","username":"youze","email":"youze27@163.com","commits":2,"url":"https://github.com/youze"}]},"readingTime":{"minutes":7.34,"words":2202},"filePathRelative":"net/git使用命令.md","localizedDate":"2024年4月12日","excerpt":"<h2>ssh密钥设置方法</h2>\\n<h3>windows</h3>\\n<ul>\\n<li>打开命令提示符（CMD）或PowerShell。</li>\\n<li>输入命令<code>ssh-keygen</code>。这个命令会启动密钥生成过程。默认情况下，它会生成一个RSA密钥对。</li>\\n<li>系统会提示你输入密钥的保存位置。如果你直接回车，密钥将保存在用户主目录下的<code>.ssh</code>文件夹中。</li>\\n<li>接下来，系统会提示你输入一个密码（passphrase）。这个密码用于保护你的私钥，增加安全性。如果你不想设置密码，直接回车即可，但这会使私钥在没有密码的情况下也能被使用，存在一定风险。</li>\\n<li>生成完成后，你会在指定的路径看到两个文件。例如，在默认路径下，<code>C:\\\\Users\\\\你的用户名\\\\.ssh\\\\id_rsa</code>是私钥文件，<code>C:\\\\Users\\\\你的用户名\\\\.ssh\\\\id_rsa.pub</code>是公钥文件。</li>\\n</ul>","autoDesc":true}')}}]);