"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[6471],{81021:(i,l)=>{l.A=(i,l)=>{const e=i.__vccOpts||i;for(const[i,n]of l)e[i]=n;return e}},21624:(i,l,e)=>{e.r(l),e.d(l,{comp:()=>u,data:()=>g});var n=e(6254);const p=e.p+"assets/img/image-20240924204909-1nqxqic.b0a546e3.png",a=e.p+"assets/img/image-20240924213524-spe8c1w.526e8da3.png",s=e.p+"assets/img/image-20240924225439-skyfs4v.a5690f37.png",t=e.p+"assets/img/image-20240924225934-cmnffe7.4c924679.png",o=e.p+"assets/img/image-20240924230133-odbvv9n.29643518.png",r=e.p+"assets/img/image-20250112135304-esqfg8l.50b3e321.png",d=e.p+"assets/img/image-20240924230346-dqbcmk6.8ebdfa6b.png",c=e.p+"assets/img/image-20250112135327-ksvd62x.eafccdd8.png",h={},u=(0,e(81021).A)(h,[["render",function(i,l){return(0,n.uX)(),(0,n.CE)("div",null,l[0]||(l[0]=[(0,n.Fv)('<h2 id="身份认证安全" tabindex="-1"><a class="header-anchor" href="#身份认证安全"><span>身份认证安全</span></a></h2><p>绕过方法</p><ol><li>暴力破解</li><li>撞库</li><li>cookie伪造、session</li></ol><p>修复方法</p><ol><li>增加验证码</li><li>限制登录频率</li><li>二次验证</li><li>使用session会话认证避免cookie仿冒。</li><li>每次登录重新生成swssion</li><li>session闲置超时退出。</li></ol><h2 id="任意密码找回" tabindex="-1"><a class="header-anchor" href="#任意密码找回"><span>任意密码找回</span></a></h2><p>密码找回的方法</p><ul><li><p>用户凭证暴力破解</p><ul><li>原理：凭证只有验证码且时间次数限制条件弱</li><li>方法：抓包-爆破</li></ul></li><li><p>返回凭证</p><ul><li>原理：校验凭证如验证码从的响应包url/请求体里由服务端返回到客户端</li><li>方法：抓包-检查-解码</li></ul></li><li><p>邮箱弱token</p><ul><li>原理：邮箱里修改密码的链接容易被伪造如（?id=MD5(uid+时间戳)）</li><li>方法：一个已知账号和一个未知账号同时点击找回密码爆破构造出找回密码URL</li></ul></li><li><p>用户凭证有效性</p><ul><li>原理1：修改他人密码时抓包将他人手机号替换为自己手机号获取验证码</li><li>原理2：修改自己密码时通过了用户校验输入新密码提交后抓包将用户id改为他人的</li><li>原理3：访问自己的重置密码邮箱链接输入新密码提交后抓包将用户id改为他人</li></ul></li><li><p>重新绑定手机和邮箱</p><ul><li>原理：给已知账号绑定手机，抓包将用户id改为他人，实现自己手机绑定他人id，并通过手机号改密。</li></ul></li><li><p>服务器验证</p><ul><li>原理1：使用邮箱找回密码，通过链接至修改密码页面，修改密码提交抓包修改为他人id。</li><li>原理2：密保问题和新密码在同一个界面，抓包删除密保问题提交。</li></ul></li><li><p>跳过验证</p><ul><li>原理：修改密码页面抓包，修改USERNAMECOOKIE为其他用户，修改密码后提交。</li><li>原理2：修改step步骤参数，直接跳到修改密码，抓包修改cookie/uid，修改密码后提交。</li></ul></li><li><p>本地验证</p><ul><li>原理1：在本地验证服务器的返回信息，确定是否执行密码重置，其返回信息是可控/可获得的内容。</li><li>原理2：发生短信等验证信息的动作在本地执行，可以通过修改request包进行控制</li></ul></li><li><p>Token生成可控</p><ul><li>原理1：修改密码时抓发送验证码的包，将接收验证码的邮箱改为自己的。邮箱点击链接修改密码。</li><li>原理2：提交验证码时抓包，修改UID，此时用户返回他人token，用已知账号抓改密包，替换其中的token发送。</li></ul></li><li><p>注册覆盖</p><ul><li>原理：注册相同用户名，数据库原账号内容被覆盖，相当于改密。未做用户名已存在校验。</li></ul></li><li><p>Session覆盖</p><ul><li>原理：同一浏览器，输入自己的账户进行邮箱密码找回，进入邮箱查看链接，接着输入他人账户，进行密码找回，返回刚刚自己的邮箱点击链接，由于session覆盖导致了，这个链接成为了修改他人密码的链接，成功修改他人密码</li></ul></li></ul><h2 id="验证码突破" tabindex="-1"><a class="header-anchor" href="#验证码突破"><span>验证码突破</span></a></h2><ul><li><h3 id="暴力破解" tabindex="-1"><a class="header-anchor" href="#暴力破解"><span>暴力破解</span></a></h3><h4 id="条件" tabindex="-1"><a class="header-anchor" href="#条件"><span>条件</span></a></h4><p>1.没有时间限制</p><p>2.没有次数限制</p><p>3.长度复杂度低</p><h4 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h4><p>使用验证码爆破工具、burpsuit枚举</p></li><li><h3 id="时间次数限制" tabindex="-1"><a class="header-anchor" href="#时间次数限制"><span>时间次数限制</span></a></h3><h4 id="检测" tabindex="-1"><a class="header-anchor" href="#检测"><span>检测</span></a></h4><p>重复提交携带验证码的数据包看是否会提示，若是前端校验直接改。</p></li><li><h3 id="回显测试" tabindex="-1"><a class="header-anchor" href="#回显测试"><span>回显测试</span></a></h3><p>1.代码审计，检查代码中是否存在验证码。</p><p>2.在cookie中查看是否存在验证码。</p><p>3.在响应包中查看是否存在验证码。</p></li><li><h3 id="验证码绕过" tabindex="-1"><a class="header-anchor" href="#验证码绕过"><span>验证码绕过</span></a></h3><p>1.登录时抓包删除验证码看后端是否校验。前端校验直接抓包爆破。</p><p>2.登录时抓包删除cookie，看是否可以登录。</p><p>3.滑动验证码滑动一次抓包爆破。</p><p>4.同一个验证码的请求包次数没有限制，使用同一验证码进行多次爆破。</p><p>5.验证码是png，验证码请求链接放入PKAV识别爆破。</p><p>6.计算型验证码，计算一次后抓包爆破。</p><p>7.固定验证码，比如资源池就几十张验证码图片，做成字典bp枚举。</p></li></ul><h2 id="api接口调用安全" tabindex="-1"><a class="header-anchor" href="#api接口调用安全"><span>API接口调用安全</span></a></h2><h3 id="接口概念" tabindex="-1"><a class="header-anchor" href="#接口概念"><span>接口概念</span></a></h3><p>应用程序编程接口(Application Programming Interface），是一些预先定义的函数，提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h3><ol><li><p>重放攻击：即恶意多次调用某个接口，如验证码API：造成短信轰炸，注册API：产生大量空壳账号。评论API：网络水军控制舆论。订单API：生成大量订单，占用库存量造成损失。</p><p>修复方法：限时限量、使用验证码、一次性token。</p></li><li><p>内容编辑：获取短信验证码，抓包，可以修改短信内容。<br> 修复方法：从客户端处获取手机号、邮箱等账号信息，要与Session中的凭证进行核验，通过后才允许进行操作。</p></li><li><p>接口调用遍历或越权：当API接收参数来返回不同的数据时，如果权限校验不严会非授权访问或越权。</p><p>修复方法：ID校验、session校验、token校验。</p></li></ol><h3 id="测试方法" tabindex="-1"><a class="header-anchor" href="#测试方法"><span>测试方法</span></a></h3><ol><li>找接口：使用URLFinder、JSFinder、API接口文档、手工获取</li><li>使用Burpsuite发送POST and GET请求，测试前删除增删改接口。</li></ol><h2 id="业务授权安全" tabindex="-1"><a class="header-anchor" href="#业务授权安全"><span>业务授权安全</span></a></h2><p>发生位置：</p><ol><li>修改、重置、找回其他账号密码。</li><li>查看修改其他用户未公开信息。</li></ol><p>水平越权:</p><p>概念：相同权限不同用户相互访问</p><p>例1：A可修改/查看B信息</p><p>例2：抓包修改url?uid=xxx批量遍历用户信息</p><p>垂直越权:</p><p>概念：低权限访问高权限或反之</p><p>例：员工修改管理员资料</p><p>检测方法：</p><ol><li>修改key值看是否能遍历他人信息，如：uid、id、username、number...</li><li>如果有验证参数尝试构造验证参数。</li></ol><p>修复方法：</p><ol><li>验证用户身份</li><li>二次验证、cookie、session、token</li></ol><h2 id="数据篡改" tabindex="-1"><a class="header-anchor" href="#数据篡改"><span>数据篡改</span></a></h2><p>业务一致性篡改：手机号、邮箱、用户名、订单ID、商品编号、</p><p>业务数据安全：金额（0元购）、数量（商品数量负数）、本地JS参数、</p><h2 id="jsencrypter使用" tabindex="-1"><a class="header-anchor" href="#jsencrypter使用"><span>jsEncrypter使用</span></a></h2><p>-- 参考文章： <a href="https://blog.csdn.net/qq_44159028/article/details/121780172" target="_blank" rel="noopener noreferrer">blog.csdn.net/qq_44159028/article/details/121780172</a></p><ol><li><p>github下载jsEncrypter解压。</p><p>​<img src="'+p+'" alt="image" loading="lazy">​</p></li><li><p>在bp里导入jsEncrypter插件</p><p><img src="'+a+'" alt="image" loading="lazy">​</p></li><li><p>MD5加密需要从外部导入加密的js代码。所以先去网上copy/下载一个MD5加密的js放入改目录备用。</p><p>​<img src="'+s+'" alt="image" loading="lazy">​</p></li><li><p>修改nodejs_server.js 里的配置</p><p>​<img src="'+t+'" alt="image" loading="lazy">​</p><p>​<img src="'+o+'" alt="image" loading="lazy">​</p></li><li><p>去目录下启动js服务</p><p>​<img src="'+r+'" alt="image" loading="lazy">​</p></li><li><p>在BP里配置测试</p><p>​<img src="'+d+'" alt="image" loading="lazy">​</p><p>​<img src="'+c+'" alt="image" loading="lazy">​</p></li></ol><p>​​</p><p>‍</p>',39)]))}]]),g=JSON.parse('{"path":"/perm/%E6%BC%8F%E6%B4%9E%E4%B8%93%E9%A2%98/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E.html","title":"逻辑漏洞","lang":"zh-CN","frontmatter":{"title":"逻辑漏洞","index":true,"icon":"list","order":2,"isOriginal":true,"date":"2023-06-09T00:00:00.000Z","category":["渗透测试"],"tag":["渗透测试","逻辑漏洞"],"description":"身份认证安全 绕过方法 暴力破解 撞库 cookie伪造、session 修复方法 增加验证码 限制登录频率 二次验证 使用session会话认证避免cookie仿冒。 每次登录重新生成swssion session闲置超时退出。 任意密码找回 密码找回的方法 用户凭证暴力破解 原理：凭证只有验证码且时间次数限制条件弱 方法：抓包-爆破 返回凭证 原理...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/perm/%E6%BC%8F%E6%B4%9E%E4%B8%93%E9%A2%98/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E.html"}],["meta",{"property":"og:site_name","content":"卷卷"}],["meta",{"property":"og:title","content":"逻辑漏洞"}],["meta",{"property":"og:description","content":"身份认证安全 绕过方法 暴力破解 撞库 cookie伪造、session 修复方法 增加验证码 限制登录频率 二次验证 使用session会话认证避免cookie仿冒。 每次登录重新生成swssion session闲置超时退出。 任意密码找回 密码找回的方法 用户凭证暴力破解 原理：凭证只有验证码且时间次数限制条件弱 方法：抓包-爆破 返回凭证 原理..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-12T08:22:33.000Z"}],["meta",{"property":"article:tag","content":"渗透测试"}],["meta",{"property":"article:tag","content":"逻辑漏洞"}],["meta",{"property":"article:published_time","content":"2023-06-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-12T08:22:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"逻辑漏洞\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-12T08:22:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"卷卷\\"}]}"]]},"headers":[{"level":2,"title":"身份认证安全","slug":"身份认证安全","link":"#身份认证安全","children":[]},{"level":2,"title":"任意密码找回","slug":"任意密码找回","link":"#任意密码找回","children":[]},{"level":2,"title":"验证码突破","slug":"验证码突破","link":"#验证码突破","children":[]},{"level":2,"title":"API接口调用安全","slug":"api接口调用安全","link":"#api接口调用安全","children":[{"level":3,"title":"接口概念","slug":"接口概念","link":"#接口概念","children":[]},{"level":3,"title":"分类","slug":"分类","link":"#分类","children":[]},{"level":3,"title":"测试方法","slug":"测试方法","link":"#测试方法","children":[]}]},{"level":2,"title":"业务授权安全","slug":"业务授权安全","link":"#业务授权安全","children":[]},{"level":2,"title":"数据篡改","slug":"数据篡改","link":"#数据篡改","children":[]},{"level":2,"title":"jsEncrypter使用","slug":"jsencrypter使用","link":"#jsencrypter使用","children":[]}],"git":{"createdTime":1736670153000,"updatedTime":1736670153000,"contributors":[{"name":"youze","username":"youze","email":"youze27@163.com","commits":1,"url":"https://github.com/youze"}]},"readingTime":{"minutes":5.98,"words":1793},"filePathRelative":"perm/漏洞专题/逻辑漏洞.md","localizedDate":"2023年6月9日","excerpt":"<h2>身份认证安全</h2>\\n<p>绕过方法</p>\\n<ol>\\n<li>暴力破解</li>\\n<li>撞库</li>\\n<li>cookie伪造、session</li>\\n</ol>\\n<p>修复方法</p>\\n<ol>\\n<li>增加验证码</li>\\n<li>限制登录频率</li>\\n<li>二次验证</li>\\n<li>使用session会话认证避免cookie仿冒。</li>\\n<li>每次登录重新生成swssion</li>\\n<li>session闲置超时退出。</li>\\n</ol>\\n<h2>任意密码找回</h2>\\n<p>密码找回的方法</p>\\n<ul>\\n<li>\\n<p>用户凭证暴力破解</p>\\n<ul>\\n<li>原理：凭证只有验证码且时间次数限制条件弱</li>\\n<li>方法：抓包-爆破</li>\\n</ul>\\n</li>\\n<li>\\n<p>返回凭证</p>\\n<ul>\\n<li>原理：校验凭证如验证码从的响应包url/请求体里由服务端返回到客户端</li>\\n<li>方法：抓包-检查-解码</li>\\n</ul>\\n</li>\\n<li>\\n<p>邮箱弱token</p>\\n<ul>\\n<li>原理：邮箱里修改密码的链接容易被伪造如（?id=MD5(uid+时间戳)）</li>\\n<li>方法：一个已知账号和一个未知账号同时点击找回密码爆破构造出找回密码URL</li>\\n</ul>\\n</li>\\n<li>\\n<p>用户凭证有效性</p>\\n<ul>\\n<li>原理1：修改他人密码时抓包将他人手机号替换为自己手机号获取验证码</li>\\n<li>原理2：修改自己密码时通过了用户校验输入新密码提交后抓包将用户id改为他人的</li>\\n<li>原理3：访问自己的重置密码邮箱链接输入新密码提交后抓包将用户id改为他人</li>\\n</ul>\\n</li>\\n<li>\\n<p>重新绑定手机和邮箱</p>\\n<ul>\\n<li>原理：给已知账号绑定手机，抓包将用户id改为他人，实现自己手机绑定他人id，并通过手机号改密。</li>\\n</ul>\\n</li>\\n<li>\\n<p>服务器验证</p>\\n<ul>\\n<li>原理1：使用邮箱找回密码，通过链接至修改密码页面，修改密码提交抓包修改为他人id。</li>\\n<li>原理2：密保问题和新密码在同一个界面，抓包删除密保问题提交。</li>\\n</ul>\\n</li>\\n<li>\\n<p>跳过验证</p>\\n<ul>\\n<li>原理：修改密码页面抓包，修改USERNAMECOOKIE为其他用户，修改密码后提交。</li>\\n<li>原理2：修改step步骤参数，直接跳到修改密码，抓包修改cookie/uid，修改密码后提交。</li>\\n</ul>\\n</li>\\n<li>\\n<p>本地验证</p>\\n<ul>\\n<li>原理1：在本地验证服务器的返回信息，确定是否执行密码重置，其返回信息是可控/可获得的内容。</li>\\n<li>原理2：发生短信等验证信息的动作在本地执行，可以通过修改request包进行控制</li>\\n</ul>\\n</li>\\n<li>\\n<p>Token生成可控</p>\\n<ul>\\n<li>原理1：修改密码时抓发送验证码的包，将接收验证码的邮箱改为自己的。邮箱点击链接修改密码。</li>\\n<li>原理2：提交验证码时抓包，修改UID，此时用户返回他人token，用已知账号抓改密包，替换其中的token发送。</li>\\n</ul>\\n</li>\\n<li>\\n<p>注册覆盖</p>\\n<ul>\\n<li>原理：注册相同用户名，数据库原账号内容被覆盖，相当于改密。未做用户名已存在校验。</li>\\n</ul>\\n</li>\\n<li>\\n<p>Session覆盖</p>\\n<ul>\\n<li>原理：同一浏览器，输入自己的账户进行邮箱密码找回，进入邮箱查看链接，接着输入他人账户，进行密码找回，返回刚刚自己的邮箱点击链接，由于session覆盖导致了，这个链接成为了修改他人密码的链接，成功修改他人密码</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);