"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[5627],{81021:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,e]of i)a[s]=e;return a}},2455:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>k,data:()=>c});var e=a(6254);const n=a.p+"assets/img/image-20240830214813-q2kvklh.faf4dab5.png",t=a.p+"assets/img/image-20240816202618-ic8ki3d.036e4c36.png",l=a.p+"assets/img/image-20240816202831-i53h65x.1ddf1be3.png",p=a.p+"assets/img/image-20240816232939-nchvk4n.f9fb320b.png",r=a.p+"assets/img/image-20240816225302-xto8a6p.1b643214.png",h=a.p+"assets/img/image-20240816223348-w522w4u.e99f28ba.png",d=a.p+"assets/img/image-20240816224929-v6r7ftq.cedaab36.png",o={},k=(0,a(81021).A)(o,[["render",function(s,i){return(0,e.uX)(),(0,e.CE)("div",null,i[0]||(i[0]=[(0,e.Fv)('<h2 id="http请求体详解" tabindex="-1"><a class="header-anchor" href="#http请求体详解"><span>HTTP请求体详解</span></a></h2><h3 id="组成部分" tabindex="-1"><a class="header-anchor" href="#组成部分"><span>组成部分</span></a></h3><div class="language-mindmap line-numbers-mode" data-highlighter="shiki" data-ext="mindmap" data-title="mindmap" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>- 报文首部</span></span>\n<span class="line"><span>  - 请求行</span></span>\n<span class="line"><span>     - 请求方法</span></span>\n<span class="line"><span>     - URL</span></span>\n<span class="line"><span>     - HTTP版本</span></span>\n<span class="line"><span>  - HTTP字段</span></span>\n<span class="line"><span>     - 【请求】首部字段</span></span>\n<span class="line"><span>     - 【通用】首部字段</span></span>\n<span class="line"><span>     - 【实体】首部字段</span></span>\n<span class="line"><span>- 空行</span></span>\n<span class="line"><span>- 报文空主体</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​<img src="'+n+'" alt="image-20240830214813-q2kvklh" loading="lazy">​</p><h3 id="get、post、put、opyion的区别" tabindex="-1"><a class="header-anchor" href="#get、post、put、opyion的区别"><span>GET、POST、PUT、OPYION的区别？</span></a></h3><p>GET方法是在URL里传参有缓存、不安全，且有长度4096限制。</p><p>POST方法是在请求体里传参，无缓存、无长度限制、相对安全。</p><h3 id="请求首部字段" tabindex="-1"><a class="header-anchor" href="#请求首部字段"><span><strong>请求首部字段</strong></span></a></h3><p><strong>首部字段名 说明</strong><br><span data-type="text" style="color:var(--b3-font-color11);">Accept 用户代理可处理的媒体类型</span></p><p><span data-type="text" style="color:var(--b3-font-color11);">Accept-Encoding 优先的内容编码</span></p><p><span data-type="text" style="color:var(--b3-font-color11);">Host 请求资源所在服务器</span></p><p><span data-type="text" style="color:var(--b3-font-color11);">User-Agent HTTP 客户端程序的信息</span></p><p><span data-type="text" style="color:var(--b3-font-color11);">content-type 内容类型 </span> 具体见常见 MIME 类型列表</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Content</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Type: text</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">html; charset</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">utf</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Content</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Type: multipart</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">form</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data; boundary</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">something</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><span data-type="text" style="background-color:var(--b3-font-background8);color:var(--b3-font-color8);">x-forwarded-for 用于标识通过代理服务器连接到 web 服务器的客户端的原始 IP 地址的标头。</span> ★可伪造</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Forwarded</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">For: </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">client</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">proxy1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">proxy2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Forwarded</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">For: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">203.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.113.195</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Forwarded</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">For: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">203.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.113.195,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2001</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:db8:</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">85a3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">8d3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1319</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">8a2e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">370</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7348</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">150.172</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.238.178</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><span data-type="text" style="background-color:var(--b3-font-background11);">HTTP_CLIENT_IP 是代理服务器发送的HTTP头。</span> ★可伪造</p><h2 id="数据传输流程" tabindex="-1"><a class="header-anchor" href="#数据传输流程"><span>数据传输流程</span></a></h2><ol><li><p>解析URL</p><p>​<code>协议</code>​://<code>域名</code>​:<code>端口</code>​/<code>目录名</code>​/<code>文件名</code>​？<code>参数</code>​#<code>锚</code>​</p><p>确定请求的<code>主机名</code>​和文件名</p></li><li><p>封装报文</p><p>​<code>请求行</code>​ <code>请求头</code>​ <code>请求体</code>​</p><p>发送端的应用层的浏览器将HTTP数据发送给传输层，传输层加上TCP首部并将数据传给网络层，网络层将数据加上IP首部后将数据发送给数据链路层，数据链路层将数据加上以太网首部。</p></li><li><p>DNS解析</p><p>域名为方便人的记忆而产生，如要传输数据，计算机需要知道对方的ip地址。</p><p>​<img src="'+t+'" alt="image" title="DNS解析的过程" loading="lazy">​</p><ol><li>搜索<span data-type="text" style="background-color:var(--b3-font-background11);">浏览器的</span>DNS缓存映射表；</li><li>搜索<span data-type="text" style="background-color:var(--b3-font-background11);">操作系统的</span>DNS缓存表；</li><li>操作系统<span data-type="text" style="background-color:var(--b3-card-error-background);color:var(--b3-card-error-color);">递归查询</span><span data-type="text" style="background-color:var(--b3-font-background11);">本地域名服务器</span>；</li><li>本地域名服务器<span data-type="text" style="background-color:var(--b3-card-error-background);color:var(--b3-card-error-color);">迭代查询</span>根域名服务器防止根压力大；</li><li>本地域名服务器访问根域名服务器返回顶级域名服务器地址；</li><li>本地域名服务器请求顶级域名服务器并返回权限域名服务器地址；</li><li>本地域名服务器访问权限域名服务器得到IP地址返回给操作系统；</li><li>操作系统返回给浏览器，两者都将映射存入缓存；</li></ol></li><li><p>建立连接</p><p>TCP通过三次握手和浏览器建立可靠的连接。</p><p>​<img src="'+l+'" alt="image" title="TCP三次握手过程" loading="lazy">​</p></li><li><p>发送请求</p><p>TCP 三次握手完成后，浏览器与目标服务器之间就建立了一个可靠的虚拟通道，于是浏览器就可以发送自己的 HTTP 请求了。</p></li><li><p>传输数据</p></li><li><p>断开连接</p><p>​<img src="'+p+'" alt="image" title="TCP连接释放过程" loading="lazy">​</p></li><li><p>浏览器渲染数据</p></li></ol><h2 id="数据传输原理" tabindex="-1"><a class="header-anchor" href="#数据传输原理"><span>数据传输原理</span></a></h2><p>​<img src="'+r+'" alt="image" title="从层次上看数据的流动" loading="lazy">​</p><ol><li><p>应用层</p><p>在该传输过程中，应用层的HTTP协议主要职责是生成针对WEB服务器的请求报文。</p></li><li><p>传输层</p><p>建立连接，通过TCP协议，将数据报分片，通过拥塞控制、流量控制、滑动窗口等确保数据可靠的到达目的地，目的地对数据排序重组，确保数据准确。</p></li><li><p>网络层</p><p>网络层指定了从哪个IP 发送到哪个IP 。网络层做出指引的过程，其称为<code>路由控制</code>​。MAC地址成为物理地址是固化在网卡的ROM中的，而IP地址是网络层以上使用的，是一种逻辑地址。ARP 是借助 ARP 请求与 ARP 响应两种类型的包确定 MAC 地址的。</p><ol><li>主机 A 为了获得主机 B 的 MAC 地址，它会先去查询自己的 ARP 高速缓存中有没有主机 B 的相关记录；</li><li>如果没有，主机 A 就会携带自己的 IP 地址 和 MAC 地址 以及 目标主机的 IP 地址通过<span data-type="text" style="background-color:var(--b3-card-error-background);color:var(--b3-card-error-color);">广播</span>的方式发送 ARP 请求包，表明自己想要获得主机 B 的 MAC 地址。</li><li>由于广播被同链路上的所有主机发现，如果有主机查找自己的ARP缓存表有和B主机IP匹配的MAC地址，就<span data-type="text" style="background-color:var(--b3-card-error-background);color:var(--b3-card-error-color);">单播</span>该MAC地址放入请求包返回给A主机。</li><li>主机 A 在收到发过来的 ARP 响应包后，向其 ARP 高速缓存中写入主机 B 的 IP 地址到 MAC 地址的映射，缓存超过<span data-type="text" style="background-color:var(--b3-card-error-background);color:var(--b3-card-error-color);">TTL</span>将被清空。</li></ol><p>​<img src="'+h+'" alt="image" title="网络层做出指引的过程" loading="lazy">​</p></li><li><p>数据链路层</p><p>网络层的数据到达数据链路层就在首部添加MAC地址封装成MAC帧，所以数据链路层则是根据 MAC 地址进行传输的，随着数据的传输，源 MAC 地址和目的 MAC 地址会不断的发生变化。</p><p>​<img src="'+d+'" alt="image" title="IP地址与MAC地址的区别" loading="lazy">​</p><p>‍</p></li></ol><p>‍</p>',23)]))}]]),c=JSON.parse('{"path":"/net/URL%E8%AF%B7%E6%B1%82%E5%90%8E%E7%9A%84%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B.html","title":"URL请求后的通信过程","lang":"zh-CN","frontmatter":{"title":"URL请求后的通信过程","index":true,"order":5,"isOriginal":true,"date":"2023-01-25T00:00:00.000Z","category":["计网基础"],"tag":["计网基础","计算机网络"],"description":"HTTP请求体详解 组成部分 ​image-20240830214813-q2kvklh​ GET、POST、PUT、OPYION的区别？ GET方法是在URL里传参有缓存、不安全，且有长度4096限制。 POST方法是在请求体里传参，无缓存、无长度限制、相对安全。 请求首部字段 首部字段名 说明 Accept 用户代理可处理的媒体类型 Accept-...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/net/URL%E8%AF%B7%E6%B1%82%E5%90%8E%E7%9A%84%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"卷卷"}],["meta",{"property":"og:title","content":"URL请求后的通信过程"}],["meta",{"property":"og:description","content":"HTTP请求体详解 组成部分 ​image-20240830214813-q2kvklh​ GET、POST、PUT、OPYION的区别？ GET方法是在URL里传参有缓存、不安全，且有长度4096限制。 POST方法是在请求体里传参，无缓存、无长度限制、相对安全。 请求首部字段 首部字段名 说明 Accept 用户代理可处理的媒体类型 Accept-..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-22T14:07:20.000Z"}],["meta",{"property":"article:tag","content":"计网基础"}],["meta",{"property":"article:tag","content":"计算机网络"}],["meta",{"property":"article:published_time","content":"2023-01-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-22T14:07:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"URL请求后的通信过程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-25T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-22T14:07:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"卷卷\\"}]}"]]},"headers":[{"level":2,"title":"HTTP请求体详解","slug":"http请求体详解","link":"#http请求体详解","children":[{"level":3,"title":"组成部分","slug":"组成部分","link":"#组成部分","children":[]},{"level":3,"title":"GET、POST、PUT、OPYION的区别？","slug":"get、post、put、opyion的区别","link":"#get、post、put、opyion的区别","children":[]},{"level":3,"title":"请求首部字段","slug":"请求首部字段","link":"#请求首部字段","children":[]}]},{"level":2,"title":"数据传输流程","slug":"数据传输流程","link":"#数据传输流程","children":[]},{"level":2,"title":"数据传输原理","slug":"数据传输原理","link":"#数据传输原理","children":[]}],"git":{"createdTime":1736670153000,"updatedTime":1737554840000,"contributors":[{"name":"youze","username":"youze","email":"youze27@163.com","commits":2,"url":"https://github.com/youze"}]},"readingTime":{"minutes":5.06,"words":1519},"filePathRelative":"net/URL请求后的通信过程.md","localizedDate":"2023年1月25日","excerpt":"<h2>HTTP请求体详解</h2>\\n<h3>组成部分</h3>\\n<div class=\\"language-mindmap line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"mindmap\\" data-title=\\"mindmap\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>- 报文首部</span></span>\\n<span class=\\"line\\"><span>  - 请求行</span></span>\\n<span class=\\"line\\"><span>     - 请求方法</span></span>\\n<span class=\\"line\\"><span>     - URL</span></span>\\n<span class=\\"line\\"><span>     - HTTP版本</span></span>\\n<span class=\\"line\\"><span>  - HTTP字段</span></span>\\n<span class=\\"line\\"><span>     - 【请求】首部字段</span></span>\\n<span class=\\"line\\"><span>     - 【通用】首部字段</span></span>\\n<span class=\\"line\\"><span>     - 【实体】首部字段</span></span>\\n<span class=\\"line\\"><span>- 空行</span></span>\\n<span class=\\"line\\"><span>- 报文空主体</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);